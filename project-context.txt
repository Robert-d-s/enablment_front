// ====== FILE: components.json ======

{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "",
    "css": "src/app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}

// ====== FILE: eslint.config.mjs ======

import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;

// ====== FILE: next.config.ts ======

import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  images: {
    remotePatterns: [
      {
        protocol: "https",
        hostname: "public.linear.app",
        pathname: "/**",
      },
      {
        protocol: "http",
        hostname: "localhost",
        pathname: "/**",
      },
    ],
  },

  async headers() {
    return [
      {
        source: "/favicon.ico",
        headers: [
          {
            key: "Cache-Control",
            value: "public, max-age=86400",
          },
        ],
      },
    ];
  },
};

export default nextConfig;

// ====== FILE: package.json ======

{
  "name": "enablement-front",
  "version": "1.0.0",
  "type": "module",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@apollo/client": "^3.12.9",
    "@radix-ui/react-label": "^2.1.3",
    "@radix-ui/react-select": "^2.1.7",
    "@radix-ui/react-slot": "^1.2.0",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "framer-motion": "^12.3.1",
    "graphql": "^16.10.0",
    "lucide-react": "^0.475.0",
    "next": "15.1.6",
    "react": "^19.0.0",
    "react-datepicker": "^8.0.0",
    "react-dom": "^19.0.0",
    "react-toastify": "^11.0.5",
    "socket.io-client": "^4.8.1",
    "tailwind-merge": "^3.0.1",
    "tailwindcss-animate": "^1.0.7",
    "use-debounce": "^10.0.4",
    "zustand": "^5.0.3"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/postcss": "^4.1.3",
    "@types/node": "^20",
    "@types/react": "^19.0.8",
    "@types/react-dom": "^19.0.3",
    "autoprefixer": "^10.4.21",
    "eslint": "^9",
    "eslint-config-next": "15.1.6",
    "postcss": "^8.5.2",
    "tailwindcss": "^4.0.0",
    "typescript": "^5"
  }
}

// ====== FILE: postcss.config.mjs ======

/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    "@tailwindcss/postcss": {},
    autoprefixer: {},
  },
};

export default config;

// ====== FILE: tailwind.config.cjs ======

/** @type {import('tailwindcss').Config} */
module.exports = {
  darkMode: ["class"],
  content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  prefix: "",
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        border: "hsl(0 0% 89.8%)",
        input: "hsl(0 0% 89.8%)",
        ring: "hsl(0 0% 3.9%)",
        background: "hsl(0 0% 100%)",
        foreground: "hsl(0 0% 3.9%)",
        primary: {
          DEFAULT: "hsl(0 0% 9%)",
          foreground: "hsl(0 0% 98%)",
        },
        secondary: {
          DEFAULT: "hsl(0 0% 96.1%)",
          foreground: "hsl(0 0% 9%)",
        },
        destructive: {
          DEFAULT: "hsl(0 84.2% 60.2%)",
          foreground: "hsl(0 0% 98%)",
        },
        muted: {
          DEFAULT: "hsl(0 0% 96.1%)",
          foreground: "hsl(0 0% 45.1%)",
        },
        accent: {
          DEFAULT: "hsl(0 0% 96.1%)",
          foreground: "hsl(0 0% 9%)",
        },
        popover: {
          DEFAULT: "hsl(0 0% 100%)",
          foreground: "hsl(0 0% 3.9%)",
        },
        card: {
          DEFAULT: "hsl(0 0% 100%)",
          foreground: "hsl(0 0% 3.9%)",
        },
        chart: {
          1: "hsl(12 76% 61%)",
          2: "hsl(173 58% 39%)",
          3: "hsl(197 37% 24%)",
          4: "hsl(43 74% 66%)",
          5: "hsl(27 87% 67%)",
        },
      },
      borderRadius: {
        lg: "0.6rem",
        md: "calc(0.6rem - 2px)",
        sm: "calc(0.6rem - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
      fontFamily: {
        sans: ["var(--font-geist-sans)"],
        mono: ["var(--font-geist-mono)"],
        "roboto-condensed": ["var(--font-roboto-condensed)"],
        "pt-sans": ["var(--font-pt-sans)"],
        rubik: ["var(--font-rubik)"],
      },
    },
  },
  plugins: [await import("tailwindcss-animate")],
};

// ====== FILE: tsconfig.json ======

{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}

// ====== FILE: src\app\ApolloWrapper.tsx ======

// src/app/ApolloWrapper.tsx
"use client";

import React, { ReactNode } from "react";
import { ApolloProvider } from "@apollo/client/react";
import client from "@/app/lib/apolloClient";

interface ApolloWrapperProps {
  children: ReactNode;
}

export default function ApolloWrapper({ children }: ApolloWrapperProps) {
  return <ApolloProvider client={client}>{children}</ApolloProvider>;
}

// ====== FILE: src\app\globals.css ======

@import "tailwindcss";

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;
    --primary: 0 0% 9%;
    --primary-foreground: 0 0% 98%;
    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;
    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 0 0% 3.9%;
    --radius: 0.6rem;
    --my-chart-1: 12 76% 61%;
    --my-chart-2: 173 58% 39%;
    --my-chart-3: 197 37% 24%;
    --my-chart-4: 43 74% 66%;
    --my-chart-5: 27 87% 67%;
  }

  .dark {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;
    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 0 0% 9%;
    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;
    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 0 0% 83.1%;
    --radius: 0.6rem;
    --my-chart-1: 220 70% 50%;
    --my-chart-2: 160 60% 45%;
    --my-chart-3: 30 80% 55%;
    --my-chart-4: 280 65% 60%;
    --my-chart-5: 340 75% 55%;
  }
}

@layer base {
  * {
    border-color: hsl(var(--border));
  }
  body {
    background-color: hsl(var(--background));
    color: hsl(var(--foreground));
  }
}

@layer components {
  /* .react-datepicker {
    border: none;
    background-color: transparent;
    font-family: var(
      --font-sans,
      ui-sans-serif,
      system-ui,
      sans-serif,
      "Apple Color Emoji",
      "Segoe UI Emoji",
      "Segoe UI Symbol",
      "Noto Color Emoji"
    );
    font-size: 0.875rem;
    line-height: 1.25rem;
  } */

  .react-datepicker__month-container {
    width: 100%;
  }

  /* .react-datepicker__header {
    border-bottom-width: 0px;
    background-color: transparent;
    padding: 0;
  } */
  /* .react-datepicker__day-names {
    margin-bottom: 0.25rem;
    display: flex;
    justify-content: space-around;
  } */
  /* .react-datepicker__day-name {
    color: hsl(var(--muted-foreground));
    width: 2rem;
    font-weight: 400;
    font-size: 0.8rem;
  } */
  .react-datepicker__week {
    margin-bottom: 0.25rem;
    display: flex;
    justify-content: space-around;
  }
  /* .react-datepicker__time-list-item--selected,
  .react-datepicker__time-list-item--selected:hover {
    background-color: hsl(var(--primary));
    color: hsl(var(--primary-foreground));
  } */

  /* .react-datepicker__day--selected {
    color: hsl(var(--primary-foreground));
    background-color: hsl(var(--primary));
  } */
  /* .react-datepicker__day--keyboard-selected {
    background-color: hsl(var(--accent));
    color: hsl(var(--accent-foreground));
  } */

  /* .bg-black select,
  .bg-black input,
  .bg-black textarea {
    color: black;
    background-color: white;
    border-color: hsl(var(--border));
  } */
}

.react-datepicker__time-container
  .react-datepicker__time
  .react-datepicker__time-box {
  width: auto !important;
  padding-left: 4px;
  padding-right: 4px;
}
/* .react-datepicker__time-list {
  scrollbar-width: thin;
  scrollbar-color: hsl(var(--border)) hsl(var(--background));
} */
.react-datepicker__time-list::-webkit-scrollbar {
  width: 6px;
}
.react-datepicker__time-list::-webkit-scrollbar-track {
  background: hsl(var(--background));
  border-radius: 3px;
}
.react-datepicker__time-list::-webkit-scrollbar-thumb {
  background-color: hsl(var(--border));
  border-radius: 3px;
  border: 1px solid hsl(var(--background));
}
.react-datepicker__time-list::-webkit-scrollbar-thumb:hover {
  background-color: hsl(var(--muted-foreground));
}

/* div[data-radix-popper-content-wrapper] {
  background-color: white !important;
  color: black !important;
} */

/* div[data-radix-popper-content-wrapper] {
  z-index: 50 !important;
} */

/* Improve hover effects */
/* [data-slot="select-item"]:hover {
  background-color: #f1f5f9 !important;
  color: black !important;
} */

.react-datepicker {
  display: flex !important;
  width: auto !important;
  font-family: var(--font-geist-sans);
}

/* .react-datepicker__month-container {
  min-width: 280px;
} */

/* .react-datepicker__time-container {
  border-left: 1px solid hsl(var(--border));
  width: 100px;
} */

.react-datepicker__time-list-item {
  padding: 5px 10px !important;
  height: auto !important;
  line-height: 1.2 !important;
  display: flex;
  justify-content: center;
}

/* .react-datepicker__time-list-item:hover:not(
    .react-datepicker__time-list-item--selected
  ) {
  background-color: hsl(var(--accent));
  color: hsl(var(--accent-foreground));
} */

.react-datepicker__time-list-item--selected {
  background-color: hsl(var(--primary)) !important;
  color: hsl(var(--primary-foreground)) !important;
  font-weight: bold;
}

/* .react-datepicker__day {
  margin: 0.2rem;
  width: 2rem;
  line-height: 2rem;
  border-radius: var(--radius);
} */

/* .react-datepicker__day:hover:not(.react-datepicker__day--selected) {
  background-color: hsl(var(--accent));
  color: hsl(var(--accent-foreground));
} */

.react-datepicker__day--selected {
  background-color: hsl(var(--primary)) !important;
  color: hsl(var(--primary-foreground)) !important;
}

.react-datepicker__day-names {
  display: flex;
  justify-content: space-around;
  margin-bottom: 0.5rem;
}

@media (max-width: 640px) {
  .react-datepicker {
    flex-direction: column;
  }

  .react-datepicker__time-container {
    border-left: none;
    border-top: 1px solid hsl(var(--border));
    width: 100%;
  }

  .react-datepicker__time {
    height: 200px;
  }
}

// ====== FILE: src\app\layout.tsx ======

import ApolloWrapper from "../app/ApolloWrapper";
import type { Metadata } from "next";
import {
  Geist,
  Geist_Mono,
  Roboto_Condensed,
  PT_Sans,
  Rubik,
} from "next/font/google";
import "./globals.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

const robotoCondensed = Roboto_Condensed({
  subsets: ["latin"],
  weight: ["300", "400", "500", "600", "800"],
  variable: "--font-roboto-condensed",
});

const ptSans = PT_Sans({
  weight: ["400", "700"],
  subsets: ["latin"],
  variable: "--font-pt-sans",
});

const rubik = Rubik({
  subsets: ["latin"],
  weight: ["300", "400", "500", "600", "700", "800", "900"],
  variable: "--font-rubik",
});

export const metadata: Metadata = {
  title: "Enablment",
  description: "Project Management Platform",
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html
      lang="en"
      className={`
      ${geistSans.variable}
      ${geistMono.variable}
      ${robotoCondensed.variable}
      ${ptSans.variable}
      ${rubik.variable}
    `}
    >
      <body className="antialiased">
        <ApolloWrapper>{children}</ApolloWrapper>
      </body>
    </html>
  );
}

// ====== FILE: src\app\page.tsx ======

"use client";

import React from "react";
import { AnimatePresence, motion } from "framer-motion";
import type { NextPage } from "next";
import { useState } from "react";
import NavBar from "@/app/components/navBar";
import { BackgroundBeams } from "@/app/components/ui/background-beams";
import ContactForm from "@/app/components/contactForm";
import ClientColab from "@/app/components/clientColab";
import Footer from "@/app/components/footer";
import SectionAnimation from "@/app/components/sectionAnimation";

const Home: NextPage = () => {
  const sections = [
    "Home",
    "About",
    "Services",
    "People",
    "Contact",
    "Client-Portal",
  ];

  const [activeSection, setActiveSection] = useState<string>(sections[0]);
  const isContactActive = activeSection === "Contact";
  const [navigationDirection, setNavigationDirection] = useState<
    "forward" | "backward"
  >("forward");

  const closeContactForm = () => {
    setActiveSection("Home");
  };

  const handleFormSubmit = (data: {
    name: string;
    email: string;
    message: string;
  }) => {
    console.log("Form Data:", data);
    setActiveSection("Home");
  };

  const handleSectionChange = (section: string) => {
    // Determine direction based on section index
    const currentIndex = sections.indexOf(activeSection);
    const nextIndex = sections.indexOf(section);
    setNavigationDirection(nextIndex > currentIndex ? "forward" : "backward");
    setActiveSection(section);
  };

  return (
    <>
      <BackgroundBeams />
      <div className="relative overflow-hidden" style={{ minHeight: "100vh" }}>
        <NavBar
          sections={sections}
          setActiveSection={handleSectionChange}
          activeSection={activeSection}
        />

        {/* Contact form overlay */}
        <AnimatePresence>
          {isContactActive && (
            <ContactForm
              onSubmit={handleFormSubmit}
              onClose={closeContactForm}
            />
          )}
        </AnimatePresence>

        <div className="grid grid-cols-12 pt-6" style={{ minHeight: "60vh" }}>
          {/* Client collaboration component for Home section - Take 3 columns on the left */}
          <div className="col-span-3">
            <AnimatePresence>
              {activeSection === "Home" && (
                <motion.div
                  className="flex justify-center items-start client-table"
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  exit={{ opacity: 0 }}
                  transition={{ duration: 0.3 }}
                >
                  <ClientColab
                    onContactClick={() => setActiveSection("Contact")}
                  />
                </motion.div>
              )}
            </AnimatePresence>
          </div>

          {/* Main section content - Take 9 columns on the right */}
          <div className="col-span-9 relative">
            <AnimatePresence mode="wait">
              {sections.map((section) => {
                if (section === "Contact") {
                  return null;
                }
                let videoSrc;
                if (section === "Home") {
                  videoSrc = "/video/hero_vid.mp4";
                }

                // Only render active section
                return (
                  activeSection === section && (
                    <SectionAnimation
                      key={section}
                      section={section}
                      navigationDirection={navigationDirection}
                      videoSrc={videoSrc}
                    />
                  )
                );
              })}
            </AnimatePresence>
          </div>
        </div>
      </div>
      <Footer />
    </>
  );
};

export default Home;

// ====== FILE: src\app\types.ts ======

export interface TimeEntry {
  id: number;
  startTime: string;
  endTime: string;
  totalElapsedTime: number;
}

export interface CreateTimeEntryVariables {
  timeInputCreate: {
    startTime: string;
    endTime?: string;
    projectId: string;
    userId: number;
    rateId: number;
    totalElapsedTime: number;
  };
}

export interface UpdateTimeEntryVariables {
  timeInputUpdate: {
    id: number;
    endTime: string;
    totalElapsedTime: number;
  };
}

export interface Rate {
  id: string;
  name: string;
  rate: number;
}

export interface FeedbackState {
  submissionSuccess: boolean;
  submissionError: string;
  dateAlertMessage: string | null;
  resetMessage: boolean;
}

export interface TimerState {
  isRunning: boolean;
  startTime: Date | null;
  displayTime: string;
  start: () => void;
  pause: () => void;
  reset: () => void;
  setStartTime: (date: Date | null) => void;
}

// ====== FILE: src\app\adminPage\page.tsx ======

"use client";

import React from "react";
import NavigationBar from "../components/NavigationBar";
import UserManagementSection from "@/app/components/Admin/userManagementSection";
import TotalTimeSpent from "@/app/components/Admin/totalTimeSpent";
import RatesManager from "@/app/components/Admin/ratesManager";
import InvoiceSummary from "@/app/components/Admin/invoiceSummary";
import DBSyncPage from "@/app/dbSynch/page";
import { ToastContainer } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";

const AdminPage: React.FC = () => {
  return (
    <>
      <NavigationBar />
      <ToastContainer
        position="top-right"
        autoClose={3000}
        hideProgressBar={false}
        newestOnTop={false}
        closeOnClick
        rtl={false}
        pauseOnFocusLoss
        draggable
        pauseOnHover
        theme="dark"
      />
      <div className="container mx-auto p-4 font-roboto-condensed">
        <UserManagementSection />
        <div className="mb-6 shadow-md">
          <TotalTimeSpent />
        </div>

        <div className="mb-6 shadow-md">
          <RatesManager />
        </div>
        <div className="shadow-md">
          <InvoiceSummary />
        </div>
        <div className="mb-6 shadow-lg">
          <DBSyncPage />
        </div>
      </div>
    </>
  );
};

export default AdminPage;

// ====== FILE: src\app\components\aboutSection.tsx ======

import React from "react";

interface IDefinition {
  term: string;
  description: string;
}

interface IAboutContent {
  definitions: IDefinition[];
  transparency: string[];
  organization: string[];
}

const aboutContent: IAboutContent = {
  definitions: [
    {
      term: "Collaborator",
      description:
        "Is a client company, who is subject to a collaboration with Enablment.",
    },
    {
      term: "Enabler",
      description:
        "Conventionally known as a consultant, but we enable Collaborators. We exist because we are Enablers who love to devise and create delightful technical solutions with Collaborators.",
    },
  ],
  transparency: [
    "We demystify the conventional consultancy-client relationship.",
    "We want transparency. In the sense that we have structurally implemented it in our professional relationship with Collaborators.",
    "We want to communicate openly with Collaborators whether an Enabler is experienced in the given tech or needs to learn new components.",
    "Consequently, we deploy varied rates for varied tasks, supported by a decision tree and a detailed invoice report.",
  ],
  organization: [
    "We place decision-making where it is due.",
    "Enablment is expanding on the idea of a flat hierarchy and is transitioning towards an organization with distributed leadership.",
    "We have a passion for rethinking and refining processes, why we deploy slim and execution-oriented project teams. That means we have redefined the project manager as a role that is shared by Collaborators and Enablers, but it is structured by a system landscape.",
    "We have added what we call work groups. These are diverse groups of Enablers which only exist to support each other in their decision-making.",
    "At Enablement, everyone is passionate about digitization and capable to execute on it.",
  ],
};

const AboutSection: React.FC = () => {
  return (
    <div className="space-y-8 p-6">
      <h2 className="text-3xl mb-4 font-pt-sans-bold-900">About Enablment</h2>
      <div style={{ maxHeight: "calc(100vh - 300px)", overflowY: "auto" }}>
        <section className="pb-4">
          <h3 className="text-2xl font-semibold mb-2">Definitions</h3>
          {aboutContent.definitions.map((def, index) => (
            <div key={index} className="mb-3">
              <p style={{ lineHeight: "1.4" }} className="text-lg">
                <span className="font-bold">{def.term}:</span> {def.description}
              </p>
            </div>
          ))}
        </section>

        <section className="flex flex-col md:flex-row space-y-4 gap-4">
          <div className="md:w-1/2">
            <h3 className="text-2xl font-semibold mb-2">Transparency</h3>
            {aboutContent.transparency.map((item, index) => (
              <div key={index} className="mb-3">
                <p
                  style={{ lineHeight: "1.4" }}
                  className="text-lg font-roboto"
                >
                  {item}
                </p>
              </div>
            ))}
          </div>
          <div className="md:w-1/2 flex justify-center shadow-md">
            <video
              className="rounded-lg lazy h-full w-full object-cover"
              autoPlay
              loop
              muted
              playsInline
              preload="metadata"
            >
              <source src="/video/transparancy.mp4" type="video/mp4" />
              Your browser does not support the video tag.
            </video>
          </div>
        </section>

        <section className="flex flex-col md:flex-row-reverse mt-6 gap-4">
          <div className="md:w-1/2 mt-6">
            <h3 className="text-2xl font-semibold mb-2">Organization</h3>
            {aboutContent.organization.map((item, index) => (
              <div key={index} className="mb-3">
                <p
                  style={{ lineHeight: "1.4" }}
                  className="text-lg font-roboto"
                >
                  {item}
                </p>
              </div>
            ))}
          </div>
          <div className="md:w-1/2 flex justify-center">
            <video
              className="rounded-lg lazy h-full w-full object-cover"
              autoPlay
              loop
              muted
              playsInline
              preload="metadata"
            >
              <source src="/video/meeting.mp4" type="video/mp4" />
              Your browser does not support the video tag.
            </video>
          </div>
        </section>
      </div>
    </div>
  );
};

export default AboutSection;

// ====== FILE: src\app\components\clientColab.tsx ======

"use client";

import React from "react";

// Define the TypeScript type for the table data
type ClientServiceData = {
  client: string;
  year: number;
  services: string;
};
interface ServiceTableProps {
  onContactClick: () => void;
}

// Sample data array
const tableData: ClientServiceData[] = [
  {
    client: "Modstrøm",
    year: 2023,
    services: "Climate Footprint Reporting: Scope 1 and 2",
  },
  { client: "Junkfood", year: 2023, services: "Climate Footprint Reporting" },
  { client: "Confidential", year: 2023, services: "Cloud, User Platform" },
  { client: "Shipping Company", year: 2023, services: "Cloud, User Platform" },
  { client: "B93", year: 2023, services: "Website, UI & UX" },
  {
    client: "B:A:M",
    year: 2024,
    services: "Video Streaming Platform and Mobil App",
  },
  { client: "H5", year: 2024, services: "Website" },
];

const ClientColab: React.FC<ServiceTableProps> = ({ onContactClick }) => {
  return (
    <div className="flex flex-col mx-2 z-10">
      <p className="text-3xl font-semibold mb-2 text-center bg-white shadow rounded-lg sm:text-2xl">
        Our Happy Collaborators
      </p>
      {tableData.map((item, index) => (
        <div key={index} className="w-full pb-2">
          <div className="bg-white shadow rounded-lg sm:p-1 sm:text-sm">
            <h3 className="text-lg sm:text-md font-semibold">{item.client}</h3>
            <p className="text-gray-900 font-roboto">Year: {item.year}</p>
            <p className="text-gray-900 font-roboto">
              Services: {item.services}
            </p>
          </div>
        </div>
      ))}
      <div className="flex mt-2">
        <button
          className="bg-green-700 hover:bg-green-500 text-white font-bold py-2 px-4 rounded-full transition-colors duration-300 "
          onClick={onContactClick}
        >
          Shall we collaborate ?
        </button>
      </div>
    </div>
  );
};

export default ClientColab;

// ====== FILE: src\app\components\contactForm.tsx ======

"use client";

import React, { useState } from "react";
import Image from "next/image";
import { motion } from "framer-motion";

interface ContactFormProps {
  onSubmit: (data: { name: string; email: string; message: string }) => void;
  onClose: () => void;
  className?: string;
  isOverlay?: boolean;
}

const ContactForm: React.FC<ContactFormProps> = ({
  onSubmit,
  onClose,
  className = "",
  isOverlay = true,
}) => {
  const [formData, setFormData] = useState({
    name: "",
    email: "",
    message: "",
  });

  const handleChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    onSubmit(formData);
  };

  const formContent = (
    <div className="bg-white flex gap-4 rounded-lg shadow-lg p-8 m-4 lg:w-10/12 max-h-full overflow-y-auto contact-form-container">
      <div>
        <video
          width="100%"
          height="auto"
          className="rounded-lg lazy"
          autoPlay
          loop
          muted
          playsInline
          preload="metadata"
        >
          <source src="/video/email.mp4" type="video/mp4" />
          Your browser does not support the video tag.
        </video>
        <div className="flex justify-between ">
          <div className="text-sm mt-4 w-1/2">
            <p>Øster Allé 56 6. sal</p>
            <p>2100 København Ø</p>
            <p>CVR: 42309648</p>
            <div className="lg:mt-6 flex flex-col space-y-2 lg:flex-row sm:mt-2 sm:space-y-0 lg:space-x-2 CandP">
              <a href="#" className="text-blue-700 hover:underline">
                Cookie policy
              </a>
              <span className="hidden lg:inline">•</span>
              <a href="#" className="text-blue-700 hover:underline">
                Privacy policy
              </a>
            </div>
          </div>
          <div className="flex flex-col items-end gap-2">
            <div className="flex mt-4">
              <span className="mr-3">
                <Image
                  src="/icons/instagram.svg"
                  alt="instagram"
                  width={24}
                  height={24}
                />
              </span>
              <span className="mr-3">
                <Image
                  src="/icons/facebook.svg"
                  alt="facebook"
                  width={24}
                  height={24}
                />
              </span>
              <span className="mr-4">
                <Image
                  src="/icons/linkedin.svg"
                  alt="linkedin"
                  width={24}
                  height={24}
                />
              </span>
              <span>
                <Image
                  src="/icons/twitter.svg"
                  alt="twitter"
                  width={24}
                  height={24}
                />
              </span>
            </div>
            <div className="flex gap-1 items-center mt-4">
              <span className="text-green-700">(+45) 22 92 67 80</span>
              <Image
                src="/icons/phone.svg"
                alt="call"
                width={24}
                height={24}
                className="align-middle"
              />
            </div>
            <div className="flex gap-1 items-center ">
              <span className="text-green-700 mb-1">gd@enablment.com</span>
              <Image
                src="/icons/mail.svg"
                alt="email"
                width={24}
                height={24}
                className="align-middle"
              />
            </div>
          </div>
        </div>
      </div>
      <div>
        <div className="flex flex-col justify-between h-full">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-lg text-gray-900">
              To: <span className="text-green-600 font-bold">Enablment</span>
            </h2>
            <button
              className="flex-none w-12 h-12 bg-black text-xl text-white rounded-full hover:bg-red-500 hover:scale-105 transition transform duration-200 ease-in-out"
              onClick={onClose}
            >
              ✕
            </button>
          </div>
          <form onSubmit={handleSubmit} className="flex flex-col flex-grow">
            <div className="flex-grow">
              <input
                type="text"
                name="name"
                placeholder="Name"
                className="w-full mb-4 p-2 border border-gray-500 rounded"
                onChange={handleChange}
                required
              />
              <input
                type="email"
                name="email"
                placeholder="E-mail"
                className="w-full mb-4 p-2 border border-gray-500 rounded"
                onChange={handleChange}
                required
              />
              <textarea
                name="message"
                placeholder="Your message"
                className="w-full mb-4 p-2 border border-gray-500 rounded"
                onChange={handleChange}
                required
              />
            </div>
            <div className="flex items-center mt-4 sm:mt-0">
              <div className="text-xs text-gray-500 flex-grow">
                This site is protected by reCAPTCHA and the Google
                <a href="#" className="text-blue-700 hover:underline">
                  {" "}
                  Privacy Policy
                </a>{" "}
                and
                <a href="#" className="text-blue-700 hover:underline">
                  {" "}
                  Terms of Service
                </a>{" "}
                apply.
              </div>
              <button
                type="submit"
                className="flex-none flex items-center justify-center w-12 h-12 bg-black text-white p-2 rounded-full hover:bg-green-500 hover:scale-105 transition transform duration-200 ease-in-out"
                aria-label="Send"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                  className="w-6 h-6 text-white"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth="2"
                    d="M14 5l7 7m0 0l-7 7m7-7H3"
                  />
                </svg>
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );

  // If not used as an overlay, just return the form content
  if (!isOverlay) {
    return formContent;
  }

  // Use as a modal overlay with animation
  return (
    <motion.div
      className={`fixed inset-0 flex justify-center items-center z-40 ${className}`}
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
      transition={{ duration: 0.3 }}
    >
      <div
        className="absolute inset-0 bg-black bg-opacity-50"
        onClick={onClose}
      ></div>
      <div className="z-50">{formContent}</div>
    </motion.div>
  );
};

export default ContactForm;

// ====== FILE: src\app\components\contentWrapper.tsx ======

"use client";

import { motion, useAnimation } from "framer-motion";
import React, { useEffect, PropsWithChildren } from "react";

interface ContentWrapperProps {
  isActive: boolean;
}

export const ContentWrapper: React.FC<
  PropsWithChildren<ContentWrapperProps>
> = ({ isActive, children }) => {
  const controls = useAnimation();

  useEffect(() => {
    controls.start(isActive ? "visible" : "hidden");
  }, [isActive, controls]);

  const contentVariants = {
    visible: {
      opacity: 1,
      maxHeight: "1000px",
      overflow: "hidden",
      transition: { duration: 0.5 },
    },
    hidden: {
      opacity: 0,
      maxHeight: 0, // Collapse content area when hidden
      overflow: "hidden",
      transition: { duration: 0.5 },
    },
  };

  return (
    <motion.div variants={contentVariants} animate={controls} initial="hidden">
      {children}
    </motion.div>
  );
};

// ====== FILE: src\app\components\FeedbackMessages.tsx ======

"use client";
import React from "react";

interface FeedbackMessagesProps {
  submissionSuccess: boolean;
  submissionError: string;
  resetMessage: boolean;
  dateAlertMessage: string | null;
}

const FeedbackMessages: React.FC<FeedbackMessagesProps> = ({
  submissionSuccess,
  submissionError,
  resetMessage,
  dateAlertMessage,
}) => {
  return (
    <div className="absolute top-5 right-5 z-50 flex flex-col items-end space-y-2">
      {submissionSuccess && (
        <div className="bg-green-100 text-green-800 text-sm font-semibold px-4 py-2 rounded-lg shadow-lg transition ease-out duration-300">
          Time entry saved!
        </div>
      )}
      {submissionError && (
        <div className="bg-red-100 text-red-800 text-sm font-semibold px-4 py-2 rounded-lg shadow-lg transition ease-out duration-300">
          {submissionError}
        </div>
      )}
      {resetMessage && (
        <div className="bg-yellow-500 text-blue-800 text-sm font-semibold px-4 py-2 rounded-lg shadow-lg transition ease-out duration-300">
          Timer reset!
        </div>
      )}
      {dateAlertMessage && (
        <div className="bg-red-100 text-red-800 text-sm font-semibold px-4 py-2 rounded-lg shadow-lg transition ease-out duration-300">
          {dateAlertMessage}
        </div>
      )}
    </div>
  );
};

export default FeedbackMessages;

// ====== FILE: src\app\components\footer.tsx ======

// FooterComponent.tsx
import React from "react";
import Image from "next/image";

const Footer: React.FC = () => {
  return (
    <div className="flex justify-between px-4 bg-gray-100 text-sm text-gray-600 mb-2">
      <div className="mt-4 w-1/2">
        <p>Øster Allé 56 6. sal</p>
        <p>2100 København Ø</p>
        <p>CVR: 42309648</p>
        <div className="flex flex-col space-y-2 sm:flex-row sm:space-y-0 sm:space-x-2 mt-4">
          <a href="#" className="text-blue-600 hover:underline">
            Cookie policy
          </a>
          <span className="hidden sm:inline">•</span>
          <a href="#" className="text-blue-600 hover:underline">
            Privacy policy
          </a>
        </div>
      </div>
      <div className="flex flex-col items-end gap-2 ">
        <div className="flex mt-2">
          <span className="mr-3">
            <Image
              src="/icons/instagram.svg"
              alt="instagram"
              width={24}
              height={24}
            />
          </span>
          <span className="mr-3">
            <Image
              src="/icons/facebook.svg"
              alt="facebook"
              width={24}
              height={24}
            />
          </span>
          <span className="mr-4">
            <Image
              src="/icons/linkedin.svg"
              alt="linkedin"
              width={24}
              height={24}
            />
          </span>
          <span>
            <Image
              src="/icons/twitter.svg"
              alt="twitter"
              width={24}
              height={24}
            />
          </span>
        </div>
        <div className="flex gap-1 items-center mt-4">
          <span className="text-black">(+45) 22 92 67 80</span>
          <Image src="/icons/phone.svg" alt="Call" width={24} height={24} />
        </div>
        <div className="flex gap-1 items-center">
          <span className="text-black mb-1">gd@enablment.com</span>
          <Image src="/icons/mail.svg" alt="Email" width={24} height={24} />
        </div>
      </div>
    </div>
  );
};

export default Footer;

// ====== FILE: src\app\components\navBar.tsx ======

"use client";

import React, { useState, useEffect } from "react";
import Image from "next/image";
import { useRouter } from "next/navigation";
import { motion } from "framer-motion";
import logo from "../../../public/logo.svg";

interface NavbarProps {
  sections: string[];
  setActiveSection: (section: string) => void;
  activeSection: string;
}

const NavBar: React.FC<NavbarProps> = ({
  sections = [],
  setActiveSection,
  activeSection,
}) => {
  const [hoveredSection, setHoveredSection] = useState<string | null>(null);
  const router = useRouter();
  const [isMenuOpen, setIsMenuOpen] = useState(false);

  // Automatically set the menu open on desktop and closed on mobile.
  useEffect(() => {
    const handleResize = () => {
      if (window.innerWidth >= 1024) {
        setIsMenuOpen(true);
      } else {
        setIsMenuOpen(false);
      }
    };

    // Run on mount
    handleResize();

    window.addEventListener("resize", handleResize);
    return () => window.removeEventListener("resize", handleResize);
  }, []);

  const handleSectionClick = (section: string) => {
    if (section === "Client-Portal") {
      router.push("/login");
    } else {
      setActiveSection(section);
    }
    // On mobile, close the menu after selection.
    if (window.innerWidth < 1024) {
      setIsMenuOpen(false);
    }
  };

  const menuIconVariants = {
    opened: {
      rotate: 90,
      scale: 1.2,
      transition: { duration: 0.2 },
    },
    closed: {
      rotate: 0,
      scale: 1,
      transition: { duration: 0.2 },
    },
  };

  const menuVariants = {
    opened: {
      opacity: 1,
      y: 0,
      display: "flex",
      transition: {
        y: { stiffness: 100, velocity: -100, type: "spring" },
        opacity: { duration: 0.3 },
      },
    },
    closed: {
      opacity: 0,
      y: "-100%",
      transition: {
        y: { stiffness: 100 },
        opacity: { duration: 0.3 },
      },
      transitionEnd: {
        display: "none",
      },
    },
  };

  return (
    <nav
      className="relative flex items-center justify-center p-4"
      style={{ minHeight: "64px" }}
    >
      <div className="absolute left-0 pl-4">
        <Image src={logo} alt="Logo" priority />
      </div>
      {/* Burger Icon – visible on mobile only */}
      <motion.div
        className="lg:hidden z-20 absolute right-4 cursor-pointer"
        onClick={() => setIsMenuOpen(!isMenuOpen)}
        variants={menuIconVariants}
        animate={isMenuOpen ? "opened" : "closed"}
      >
        <svg
          className="w-6 h-6"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth="2"
            d={isMenuOpen ? "M6 18L18 6M6 6l12 12" : "M4 6h16M4 12h16M4 18h16"}
          ></path>
        </svg>
      </motion.div>
      {/* Menu Container */}
      <motion.div
        variants={menuVariants}
        initial="closed"
        animate={isMenuOpen ? "opened" : "closed"}
        className="menu-container absolute md:top-auto md:relative md:flex md:flex-row md:items-center md:space-x-4"
      >
        {sections.map((section) => (
          <div
            key={section}
            className="flex items-center"
            onMouseEnter={() => setHoveredSection(section)}
            onMouseLeave={() => setHoveredSection(null)}
          >
            <div
              className={`h-4 w-4 rounded-full cursor-pointer transition duration-800 ease-in-out ${
                activeSection === section
                  ? "bg-green-500"
                  : hoveredSection === section
                  ? "bg-gray-500"
                  : "bg-transparent border-2 border-black"
              }`}
              onClick={() => handleSectionClick(section)}
            />
            <button
              className={`py-2 px-4 ${
                section === "Contact"
                  ? "text-white font-bold rounded-lg px-2 mx-2 py-0 bg-green-700"
                  : "text-black"
              }`}
              onClick={() => handleSectionClick(section)}
            >
              {section}
            </button>
          </div>
        ))}
      </motion.div>
    </nav>
  );
};

export default NavBar;

// ====== FILE: src\app\components\NavigationBar.tsx ======

"use client";

import React from "react";
import Image from "next/image";
import Link from "next/link";
import { clientLogout } from "@/app/lib/apolloClient";
import { useAuthStore } from "../lib/authStore";
import useCurrentUser from "../hooks/useCurrentUser";

const NavigationBar: React.FC = () => {
  const { isLoading } = useCurrentUser();
  const user = useAuthStore((state) => state.user);

  const handleLogout = () => {
    clientLogout();
  };

  return (
    <nav className="flex items-center justify-between p-4 bg-white shadow font-roboto-condensed uppercase">
      <Link href="/">
        <Image
          src="/logo.svg"
          alt="Enablment-tt Logo"
          width={200}
          height={40}
          style={{ cursor: "pointer" }}
        />
      </Link>
      <div className="flex-grow font-semibold text-lg mx-4 flex items-center justify-center">
        <Link href="/issuesPage" className="mr-4">
          Issues
        </Link>
        <Link href="/adminPage" className="mr-4">
          Admin
        </Link>
        <Link href="/timeKeeper">Timekeeper</Link>
      </div>
      <div>
        <div>
          <div
            className={
              user
                ? "bg-gray-800 text-white px-4 m-1 rounded"
                : "text-md text-gray-500"
            }
          >
            {user
              ? user.email
              : isLoading
              ? "Loading user data..."
              : "Not logged in"}
          </div>
        </div>
        <button
          className="bg-black text-white rounded hover:bg-gray-800 font-bold py-1 px-4 float-right font-roboto-condensed uppercase"
          style={{ fontSize: "12px" }}
          onClick={handleLogout}
        >
          Logout
        </button>
      </div>
    </nav>
  );
};

export default NavigationBar;

// ====== FILE: src\app\components\peopleSection.tsx ======

"use client";

import React from "react";
import Image from "next/image";

interface Person {
  name: string;
  roles: string[];
  images: [string, string];
}

const peopleData: Person[] = [
  {
    name: "Gustav Duus",
    images: ["/members/ceo_1.jpg", "/members/ceo_2.jpg"],
    roles: ["CEO", "Co-Founder"],
  },
  {
    name: "Joakim Larsen",
    images: ["/members/m_1.jpg", "/members/m_2.jpg"],
    roles: ["Co-Founder"],
  },
  {
    name: "George Aftincai",
    images: ["/members/gerorge_1.jpg", "/members/gerorge_2.jpg"],
    roles: ["Front-end"],
  },
  {
    name: "Riccardo Conti",
    images: ["/members/ricardo_1.jpg", "/members/ricardo_2.jpg"],
    roles: ["Front-end", "Mobile"],
  },
  {
    name: "Sam Hakimane",
    images: ["/members/sam_1.jpg", "/members/sam_2.jpg"],
    roles: ["Back-end"],
  },
  {
    name: "Jedrzej Lagodzinski",
    images: ["/members/j_1.jpg", "/members/j_2.jpg"],
    roles: ["Front-end"],
  },
  {
    name: "David Lin",
    images: ["/members/david_1.jpg", "/members/david_2.jpg"],
    roles: ["Front-end", "Design"],
  },
];

interface PeopleSectionProps {
  isActive: boolean;
}

const PeopleSection: React.FC<PeopleSectionProps> = ({ isActive }) => {
  if (!isActive) return null;
  return (
    <div className="p-4">
      <h2 className="text-3xl font-pt-sans-bold-900 mb-4 mx-4">People</h2>
      <div className="people-section grid grid-cols-1 sm:grid-cols-3 gap-4 p-4">
        {peopleData.map((person, index) => (
          <PersonCard key={index} person={person} />
        ))}
      </div>
    </div>
  );
};

interface PersonCardProps {
  person: Person;
}

type RoleIconMappingType = {
  [roleName: string]: string;
};

const roleIconMapping: RoleIconMappingType = {
  CEO: "ceo.svg",
  "Co-Founder": "founder.svg",
  "Front-end": "front.svg",
  Mobile: "mobile.svg",
  "Back-end": "back.svg",
  Design: "design.svg",
};

const getIconPath = (role: string): string => {
  return `/icons/${roleIconMapping[role] || "default-icon.svg"}`;
};

const PersonCard: React.FC<PersonCardProps> = ({ person }) => {
  const [isHovered, setIsHovered] = React.useState(false);
  return (
    <div
      className="person-card cursor-pointer overflow-hidden relative w-full h-auto shadow-lg"
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
    >
      <div
        className="relative w-full md:w-auto lg:w-full aspect-w-1 aspect-h-1"
        style={{ paddingTop: "calc(512 / 342 * 100%)" }}
      >
        <div
          className={`absolute inset-0 transition-opacity duration-700 ease-in-out ${
            isHovered ? "opacity-0" : "opacity-100"
          }`}
          style={{ paddingTop: "calc(512 / 342 * 100%)" }}
        >
          <Image
            src={person.images[0]}
            alt={`${person.name} - Base`}
            fill
            sizes="(max-width: 768px) 100vw, 50vw"
            className="rounded-lg"
          />
        </div>
        <div
          className={`absolute inset-0 transition-opacity duration-700 ease-in-out ${
            isHovered ? "opacity-100" : "opacity-0"
          }`}
          style={{ paddingTop: "calc(512 / 342 * 100%)" }}
        >
          <Image
            src={person.images[1]}
            alt={`${person.name} - Hover`}
            fill
            sizes="(max-width: 768px) 100vw, 50vw"
            className="rounded-lg"
          />
        </div>
      </div>
      <div className="absolute inset-0 flex flex-col justify-end p-4 rounded-lg">
        <div
          style={{ width: "fit-content" }}
          className="bg-black bg-opacity-40 lg:p-2 sm:p-1"
        >
          <h3 className="text-white lg:text-xl md:text-sm font-bold">
            {person.name}
          </h3>
        </div>
        {person.roles.map((role, index) => (
          <div key={index} style={{ width: "fit-content" }}>
            <div className="bg-black bg-opacity-40 flex items-center">
              <div className="relative mr-1 flex justify-center items-center w-8 h-8 sm:w-[3vw] sm:h-[3vw] lg:w-[2vw] lg:h-[2vw] md:w-[3vw] md:h-[3vw]">
                <Image
                  src={getIconPath(role)}
                  alt={`${role} icon`}
                  fill
                  className="filter invert"
                />
              </div>
              <span className="text-white lg:text-lg md:text-sm mr-2">
                {role}
              </span>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default PeopleSection;

// ====== FILE: src\app\components\ProjectRateSelectors.tsx ======

"use client";

import React from "react";
import { ApolloError } from "@apollo/client";
import { formatTimeFromMilliseconds } from "../utils/timeUtils";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Label } from "@/components/ui/label";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
} from "@/components/ui/card";
import { Hourglass, Loader2 } from "lucide-react";

interface Project {
  id: string;
  name: string;
  teamName?: string;
}

interface Rate {
  id: string;
  name: string;
  rate: number;
}

interface ProjectRateSelectorsProps {
  userProjects: Project[];
  selectedProject: string | null;
  setSelectedProject: (projectId: string) => void;
  rates: Rate[];
  selectedRate: string | null;
  setSelectedRate: (rateId: string) => void;
  totalTimeLoading: boolean;
  totalTimeError: ApolloError | undefined;
  totalTime: number;
}

const selectDropdownStyle = {
  backgroundColor: "white",
  color: "black",
  border: "1px solid #e2e8f0",
  boxShadow:
    "0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)",
};

const selectItemStyle = {
  backgroundColor: "white",
  color: "black",
  cursor: "pointer",
};

const ProjectRateSelectors: React.FC<ProjectRateSelectorsProps> = ({
  userProjects,
  selectedProject,
  setSelectedProject,
  rates,
  selectedRate,
  setSelectedRate,
  totalTimeLoading,
  totalTimeError,
  totalTime,
}) => {
  return (
    <Card className="overflow-visible">
      <CardHeader>
        <CardTitle>Project & Rate</CardTitle>
        <CardDescription>
          Select the project and rate for this time entry.
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-6">
        {/* Project Selector */}
        <div className="space-y-2">
          <Label htmlFor="project-select">Project</Label>
          {/* <Select
            value={selectedProject ?? ""}
            onValueChange={setSelectedProject}
            disabled={userProjects.length === 0}
          >
            <SelectTrigger
              id="project-select"
              className="w-full border-input"
              style={{ backgroundColor: "white", color: "black" }}
            >
              <SelectValue placeholder="Select a project..." />
            </SelectTrigger>
            <SelectContent
              style={selectDropdownStyle}
              className="border border-slate-200 rounded"
              position="popper"
            >
              {userProjects.length > 0 ? (
                userProjects.map((project) => (
                  <SelectItem
                    key={project.id}
                    value={project.id}
                    style={selectItemStyle}
                    className="hover:bg-slate-100 rounded"
                  >
                    {project.name}{" "}
                    {project.teamName ? `(${project.teamName})` : ""}
                  </SelectItem>
                ))
              ) : (
                <div className="p-2 text-sm text-gray-500">
                  No projects found.
                </div>
              )}
            </SelectContent>
          </Select> */}
          <Select
            value={selectedProject ?? ""}
            onValueChange={setSelectedProject}
            disabled={userProjects.length === 0}
          >
            {/* Use default trigger styles, add w-full for layout */}
            <SelectTrigger id="project-select" className="w-full">
              <SelectValue placeholder="Select a project..." />
            </SelectTrigger>
            {/* Use default content styles */}
            <SelectContent position="popper">
              {userProjects.length > 0 ? (
                userProjects.map((project) => (
                  // Use default item styles
                  <SelectItem key={project.id} value={project.id}>
                    {project.name}{" "}
                    {project.teamName ? `(${project.teamName})` : ""}
                  </SelectItem>
                ))
              ) : (
                <div className="p-2 text-sm text-muted-foreground">
                  No projects found.
                </div>
              )}
            </SelectContent>
          </Select>
        </div>

        {/* Rate Selector */}
        <div className="space-y-2">
          <Label htmlFor="rate-select">Rate</Label>
          <Select
            value={selectedRate ?? ""}
            onValueChange={setSelectedRate}
            disabled={!selectedProject || rates.length === 0}
          >
            <SelectTrigger
              id="rate-select"
              className="w-full border-input"
              style={{ backgroundColor: "white", color: "black" }}
            >
              <SelectValue placeholder="Select a rate..." />
            </SelectTrigger>
            <SelectContent
              style={selectDropdownStyle}
              className="border border-slate-200 rounded"
              position="popper"
            >
              {rates.length > 0 ? (
                rates.map((rate) => (
                  <SelectItem
                    key={rate.id}
                    value={rate.id}
                    style={selectItemStyle}
                    className="hover:bg-slate-100 rounded"
                  >
                    {rate.name} ({rate.rate} DKK/h)
                  </SelectItem>
                ))
              ) : (
                <div className="p-2 text-sm text-gray-500">
                  {selectedProject
                    ? "No rates for this project."
                    : "Select a project first."}
                </div>
              )}
            </SelectContent>
          </Select>
        </div>

        {/* Total Time Display */}
        <div className="border-t pt-4 mt-4">
          <Label className="text-sm font-medium">Total Time on Project</Label>
          <div className="flex items-center gap-2 mt-1">
            <Hourglass className="h-5 w-5 text-muted-foreground" />
            {totalTimeLoading ? (
              <span className="flex items-center gap-1 text-muted-foreground italic">
                <Loader2 className="h-4 w-4 animate-spin" /> Loading...
              </span>
            ) : totalTimeError ? (
              <span className="text-sm text-red-600">Error loading time</span>
            ) : (
              <span className="text-lg font-semibold font-mono">
                {formatTimeFromMilliseconds(totalTime)}
              </span>
            )}
          </div>
          {totalTimeError && (
            <p className="text-xs text-red-500 mt-1">
              {totalTimeError.message}
            </p>
          )}
        </div>
      </CardContent>
    </Card>
  );
};

export default ProjectRateSelectors;

// ====== FILE: src\app\components\ProjectSelector.tsx ======

"use client";

import React from "react";

type ProjectSelectorProps = {
  projects: { id: string; name: string; teamName?: string }[];
  selectedProject: string;
  onProjectChange: (projectId: string) => void;
  className?: string;
};

const ProjectSelector: React.FC<ProjectSelectorProps> = ({
  projects,
  selectedProject,
  onProjectChange,
}) => {
  return (
    <select
      value={selectedProject}
      onChange={(e) => onProjectChange(e.target.value)}
      className="form-input block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
    >
      <option value="" disabled>
        Select a project
      </option>
      {projects.map((project) => (
        <option key={project.id} value={project.id}>
          {project.name} (Team: {project.teamName})
        </option>
      ))}
    </select>
  );
};

export default ProjectSelector;

// ====== FILE: src\app\components\RateSelector.tsx ======

"use client";

import React from "react";

type RateSelectorProps = {
  rates: { id: string; name: string; rate: number }[];
  selectedRate: string;
  onRateChange: (rateId: string) => void;
};

const RateSelector: React.FC<RateSelectorProps> = ({
  rates,
  selectedRate,
  onRateChange,
}) => {
  return (
    <select
      value={selectedRate}
      onChange={(e) => onRateChange(e.target.value)}
      className="form-input block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
    >
      <option value="" disabled>
        Select a rate
      </option>
      {rates.map((rate) => (
        <option key={rate.id} value={rate.id}>
          {rate.name} ({rate.rate})
        </option>
      ))}
    </select>
  );
};

export default RateSelector;

// ====== FILE: src\app\components\sectionAnimation.tsx ======

"use client";

import React from "react";
import { motion } from "framer-motion";
import SectionWrapper from "@/app/components/sectionWrapper";

interface SectionAnimationProps {
  section: string;
  navigationDirection: "forward" | "backward";
  videoSrc?: string;
}

const SectionAnimation: React.FC<SectionAnimationProps> = ({
  section,
  navigationDirection,
  videoSrc,
}) => {
  return (
    <motion.div
      key={section}
      className="w-full"
      initial={{
        opacity: 0,
        x: navigationDirection === "forward" ? 100 : -100,
      }}
      animate={{
        opacity: 1,
        x: 0,
      }}
      exit={{
        opacity: 0,
        x: navigationDirection === "forward" ? -100 : 100,
      }}
      transition={{
        type: "spring",
        stiffness: 80,
        damping: 15,
        mass: 1,
      }}
    >
      <SectionWrapper
        id={section}
        content={section}
        color={"bg-gray-200"}
        videoSrc={videoSrc}
      />
    </motion.div>
  );
};

export default SectionAnimation;

// ====== FILE: src\app\components\sectionWrapper.tsx ======

"use client";

import React from "react";
import PeopleSection from "@/app/components/peopleSection";
import AboutSection from "@/app/components/aboutSection";
import ServicesSection from "@/app/components/servicesSection";

interface SectionProps {
  id: string;
  content: string;
  color: string;
  videoSrc?: string;
}

const SectionWrapper: React.FC<SectionProps> = ({
  id,
  content,
  color,
  videoSrc,
}) => {
  return (
    <div
      className={`section border-2 border-green-600 rounded-tl-3xl rounded-tr-3xl shadow-lg ${color} responsive-section`}
      style={{
        width: "100%",
        boxSizing: "border-box",
      }}
    >
      {id === "People" ? (
        <div
          className="overflow-y-auto"
          style={{ maxHeight: "calc(100vh - 200px)" }}
        >
          <PeopleSection isActive={true} />
        </div>
      ) : id === "About" ? (
        <AboutSection />
      ) : id === "Services" ? (
        <ServicesSection />
      ) : videoSrc ? (
        <div className="w-full h-full">
          <video
            className="video w-full h-full overflow-hidden rounded-tl-3xl rounded-tr-3xl object-cover"
            autoPlay
            loop
            muted
            playsInline
          >
            <source src={videoSrc} type="video/mp4" />
            Your browser does not support the video tag.
          </video>
          <div className="flex overlay-text lg:bottom-48 p-4 lg:relative md:flex ">
            <h2 className="lg:text-4xl font-bold text-white p-4 bg-black bg-opacity-50 rounded-lg sm:text-lg">
              We enable Collaborators
              <br /> to create delightful technical solutions
            </h2>
          </div>
        </div>
      ) : (
        <>
          <h2 className="text-2xl font-bold mb-4">{content}</h2>
          <p className="text-gray-700">
            Placeholder content for the {content} section.
          </p>
        </>
      )}
    </div>
  );
};

export default SectionWrapper;

// ====== FILE: src\app\components\servicesSection.tsx ======

"use client";

import React from "react";
import Image from "next/image";

interface IFeature {
  name: string;
  icon: string;
}

interface IService {
  title: string;
  description: string[];
  icon: string;
  features?: IFeature[];
  imageUrl: string;
}

const servicesData: IService[] = [
  {
    title: "Digital Product Development",
    description: [
      "Do you know the feeling of navigating a website or a mobile application and it is either hideous or you are getting lost in the pages all the time?",
      "UI and UX is the art of creating beautiful applications that offer a smooth user experience whether it is a web or mobile application.",
      "Both are essential for creating a successful application. UI design ensures that the application looks visually appealing and attractive to users, while UX design ensures that the application is intuitive and easy to use.",
      "Let us enable you to balance both.",
    ],
    icon: "/icons/digital.svg",
    imageUrl: "/images/dpd.jpg",
    features: [
      {
        name: "E-commerce & Websites",
        icon: "/icons/e-commerce.svg",
      },
      {
        name: "Mobile apps & Web applications",
        icon: "/icons/mobile.svg",
      },
      {
        name: "Digital Solutions & Platforms",
        icon: "/icons/platforms.svg",
      },
    ],
  },
  {
    title: "Climate Reporting",
    description: [
      "Searching for the right data? Preparing to report scope 1, 2 or 3? Or are you looking for internal tracking to make data-driven decisions to lower your climate footprint?",
      "At Enablment, we have the technical skills to integrate with the correct data sources and align that data for trustworthy reporting. We can set up automated reporting flows from multiple data sources for internal tracking.",
    ],
    icon: "/icons/climate.svg",
    imageUrl: "/images/climate.jpg",
  },
  {
    title: "Insights through Data",
    description: [
      "On the journey of digitalization, automating and optimizing processes and data collection create the best fundamentals for an effective digital solution.",
      "Luckily, we are more than stoked to help you with following.",
    ],
    icon: "/icons/data.svg",
    imageUrl: "/images/data.jpg",
  },
  {
    title: "Data Consolidation (Cloud)",
    description: [
      "Is it difficult, and time consuming gathering data, and structuring it for data analytics/insight?",
      "This is the first step within data analytics and all companies will inevitably go through this transformation at some point. Once implemented there will be a consistent and reliable data foundation for all data analysis. Plus a setup like this is fully automated.",
    ],
    icon: "/icons/cloud.svg",
    imageUrl: "/images/cloud.jpg",
  },
  {
    title: "Business Intelligence (BI)",
    description: [
      "Do you have a database that is automatically sourcing the data for you? And is your data then, consequently, consolidated in one place and might even be structured? Now you want insight from your data?",
      "This is Business Intelligence. We conduct a data analysis and transform your data, then we create dashboards to visualize the insight.",
    ],
    icon: "/icons/bi.svg",
    imageUrl: "/images/bi.jpg",
  },
  {
    title: "Machine Learning & Artificial Intelligence (ML & AI)",
    description: [
      "Is your decision-making process supplemented with insight and a descriptive data analysis through BI? Are you ready to let a data model offer you suggestions?",
      "Certain trends and causalities that might not be visible to the human eye or the data input is simply too big. This is when you move from the descriptive to the prescriptive data analysis. A machine learning model can highlight causalities and forecast development.",
    ],
    icon: "/icons/ai.svg",
    imageUrl: "/images/AI-ML.jpg",
  },
];

const ServicesSection: React.FC = () => {
  return (
    <div className="space-y-8 p-4 sm:p-6">
      <h2 className="text-3xl font-pt-sans-bold-900 mb-4">Services</h2>
      <div
        style={{
          maxHeight: "calc(100vh - 300px)",
          overflowY: "auto",
        }}
      >
        {servicesData.map((service, index) => (
          <div key={index} className="mb-6">
            <div className="flex flex-wrap items-stretch shadow-lg rounded-lg overflow-hidden lg:justify-start sm:justify-center lg:flex-nowrap space-x-4">
              <div className="relative w-full flex-grow tablet:flex-grow-0 md:w-1/2  services-image-container">
                <Image
                  src={service.imageUrl}
                  alt={`${service.title}`}
                  layout="fill"
                  objectFit="cover"
                  sizes="(min-width: 768px) 50vw, 100vw"
                />
              </div>
              <div className="text-container lg:w-1/2 sm:mt-4">
                <div className="flex items-center space-x-2">
                  <Image
                    src={service.icon}
                    alt={`${service.title} Icon`}
                    width={24}
                    height={24}
                  />
                  <h3 className="text-2xl font-semibold mb-2">
                    {service.title}
                  </h3>
                </div>
                {service.description.map((paragraph, pIndex) => (
                  <p
                    key={pIndex}
                    style={{ lineHeight: "1.4" }}
                    className="text-lg mb-3"
                  >
                    {paragraph}
                  </p>
                ))}
                {service.features && (
                  <div className="flex flex-col space-y-2 mt-4">
                    {service.features.map((feature, fIndex) => (
                      <div
                        key={fIndex}
                        className="flex items-center space-x-2 "
                      >
                        <Image
                          src={feature.icon}
                          alt={`${feature.name} Icon`}
                          width={20}
                          height={20}
                        />
                        <span style={{ lineHeight: "1.4" }} className="text-lg">
                          {feature.name}
                        </span>
                      </div>
                    ))}
                  </div>
                )}
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default ServicesSection;

// ====== FILE: src\app\components\TimerControls.tsx ======

"use client";
import React from "react";
import { Button } from "@/components/ui/button";
import { Play, Pause, RotateCcw, Send } from "lucide-react";

interface TimerControlsProps {
  isRunning: boolean;
  handleStartStop: () => void;
  handleReset: () => void;
  handleSubmit: (e: React.FormEvent<HTMLFormElement>) => void;
  disabledStartPause: boolean;
  disabledReset: boolean;
  disabledSubmit: boolean;
}

const TimerControls: React.FC<TimerControlsProps> = ({
  isRunning,
  handleStartStop,
  handleReset,
  handleSubmit,
  disabledStartPause,
  disabledReset,
  disabledSubmit,
}) => {
  return (
    <form onSubmit={handleSubmit} className="w-full">
      <div className="flex justify-center items-center gap-4 mt-4 w-full">
        <Button
          type="button"
          variant={isRunning ? "destructive" : "default"}
          size="lg"
          onClick={handleStartStop}
          disabled={disabledStartPause}
          className={`flex items-center gap-2 ${
            isRunning
              ? "bg-red-600 hover:bg-red-700"
              : "bg-green-600 hover:bg-green-700"
          }`}
        >
          {isRunning ? (
            <Pause className="h-5 w-5" />
          ) : (
            <Play className="h-5 w-5" />
          )}
          {isRunning ? "Pause" : "Start"}
        </Button>

        <Button
          type="button"
          variant="outline"
          size="lg"
          onClick={handleReset}
          disabled={disabledReset}
          className="flex items-center gap-2"
        >
          <RotateCcw className="h-5 w-5" />
          Reset
        </Button>

        <Button
          type="submit"
          variant="default"
          size="lg"
          disabled={disabledSubmit}
          className="flex items-center gap-2"
        >
          <Send className="h-5 w-5" />
          Submit
        </Button>
      </div>
    </form>
  );
};

export default TimerControls;

// ====== FILE: src\app\components\TimerDisplay.tsx ======

import React from "react";
import DatePicker from "react-datepicker";
import "react-datepicker/dist/react-datepicker.css";
import "@/app/globals.css";
import {
  formatDateForDisplay,
  formatTimeFromISOString,
} from "../utils/timeUtils";
import { formatISO, isToday, isSameDay, getMonth } from "date-fns";
import { Timer, ChevronLeft, ChevronRight } from "lucide-react";
import { cn } from "@/app/lib/utils";
import { buttonVariants } from "@/components/ui/button";

interface TimerDisplayProps {
  isRunning: boolean;
  displayTime: string;
  initialStartTime: Date | null;
  handleDateChange: (date: Date | null) => void;
}

const getDayClassName = (
  date: Date,
  selectedDate: Date | null,
  currentMonthDate: Date
) => {
  return cn(
    buttonVariants({ variant: "ghost" }),
    "h-8 w-8 p-0 font-normal text-sm", // Slightly smaller days
    "aria-selected:opacity-100 rounded-md", // Keep rounding
    !isSameDay(getMonth(date), getMonth(currentMonthDate)) &&
      "text-muted-foreground opacity-50", // Dim days outside month
    isToday(date) && "bg-accent text-accent-foreground",
    selectedDate &&
      isSameDay(date, selectedDate) &&
      "bg-primary text-primary-foreground hover:bg-primary/90 hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground", // Use hover variant
    "focus:outline-none focus:ring-1 focus:ring-ring"
  );
};

// Helper for Time class styling
const getTimeClassName = (time: Date, selected: Date | null) => {
  const isSelected =
    selected &&
    time.getHours() === selected.getHours() &&
    time.getMinutes() === selected.getMinutes();
  return cn(
    "text-sm p-1 mx-1 flex justify-center items-center rounded-md cursor-pointer",
    "hover:bg-accent hover:text-accent-foreground", // Hover effect
    isSelected && "bg-primary text-primary-foreground hover:bg-primary/90" // Selected style (might be overridden by CSS)
  );
};

const TimerDisplay: React.FC<TimerDisplayProps> = ({
  isRunning,
  displayTime,
  initialStartTime,
  handleDateChange,
}) => {
  return (
    <div className="flex flex-col items-center gap-3 w-full">
      {" "}
      {/* Increased gap */}
      {/* Timer Value */}
      <div className="flex items-center justify-center gap-2 text-foreground mb-1">
        <Timer
          className={`h-5 w-5 ${
            isRunning ? "text-green-500 animate-pulse" : "text-muted-foreground"
          }`}
        />
        <div className="text-6xl md:text-7xl font-mono font-bold tracking-tighter text-center tabular-nums">
          {" "}
          {/* Added tabular-nums */}
          {displayTime}
        </div>
      </div>
      {/* Start Time Display */}
      <div className="text-xs text-muted-foreground mb-2 text-center">
        {" "}
        {/* Smaller text */}
        Started:{" "}
        {initialStartTime ? (
          `${formatDateForDisplay(initialStartTime)} ${formatTimeFromISOString(
            formatISO(initialStartTime)
          )}`
        ) : (
          <span className="italic">Not Started</span>
        )}
      </div>
      {/* --- Styled Date Picker --- */}
      {/* Container mimicking shadcn card/popover */}
      <div className="p-1 border rounded-md bg-card shadow-sm w-full max-height-[300px] overflow-hidden">
        {" "}
        {/* Adjusted width slightly */}
        <DatePicker
          inline
          id="startDate"
          selected={initialStartTime}
          onChange={handleDateChange}
          showTimeSelect
          dateFormat="MMMM d, yyyy h:mm aa"
          timeIntervals={15}
          preventOpenOnFocus
          // --- Styling Props ---
          calendarClassName="datepicker-calendar"
          dayClassName={(date) =>
            getDayClassName(
              date,
              initialStartTime,
              initialStartTime || new Date()
            )
          }
          timeClassName={(time) => getTimeClassName(time, initialStartTime)}
          timeFormat="h:mm aa"
          timeCaption="Time"
          // --- Custom Header ---
          renderCustomHeader={({
            date,
            decreaseMonth,
            increaseMonth,
            prevMonthButtonDisabled,
            nextMonthButtonDisabled,
          }) => (
            <div className="flex items-center justify-between px-1 py-1.5">
              <button
                type="button"
                onClick={decreaseMonth}
                disabled={prevMonthButtonDisabled}
                className={cn(
                  buttonVariants({ variant: "outline", size: "icon" }),
                  "h-7 w-7 disabled:opacity-50 border"
                )}
              >
                <ChevronLeft className="h-4 w-4" />
              </button>
              <span className="text-sm font-medium">
                {/* Display Month Year */}
                {new Intl.DateTimeFormat("en-US", {
                  month: "long",
                  year: "numeric",
                }).format(date)}
              </span>
              <button
                type="button"
                onClick={increaseMonth}
                disabled={nextMonthButtonDisabled}
                className={cn(
                  buttonVariants({ variant: "outline", size: "icon" }),
                  "h-7 w-7 disabled:opacity-50 border"
                )}
              >
                <ChevronRight className="h-4 w-4" />
              </button>
            </div>
          )}
        />
      </div>
    </div>
  );
};

export default TimerDisplay;

// ====== FILE: src\app\components\UserSelector.tsx ======

"use client";

const UserSelector: React.FC<{
  users: { id: string; email: string }[];
  selectedUser: string;
  onUserChange: (userId: string) => void;
}> = ({ users, selectedUser, onUserChange }) => {
  return (
    <select
      value={selectedUser}
      onChange={(e) => onUserChange(e.target.value)}
      className="form-input block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
    >
      <option value="" disabled>
        Select a user
      </option>
      {users.map((user) => (
        <option key={user.id} value={user.id}>
          {user.email}
        </option>
      ))}
    </select>
  );
};
export default UserSelector;

// ====== FILE: src\app\dbSynch\page.tsx ======

"use client";

import React, { useState } from "react";
import { useQuery, useMutation, gql } from "@apollo/client";
import { motion } from "framer-motion";
import { SYNC_DATABASE_MUTATION } from "@/app/graphql/authOperations";

export interface SimpleTeam {
  id: string;
  name: string;
}

export interface SimpleProject {
  id: string;
  name: string;
  teamId: string;
}

export interface DBSyncIssue {
  id: string;
  title: string;
  teamKey?: string;
  projectId?: string;
  projectName?: string;
  state?: string;
  labels?: SimpleLabel[];
}

export interface SimpleLabel {
  id: string;
  name: string;
  color: string;
}

// GraphQL queries to fetch data
const GET_TEAMS = gql`
  query GetAllSimpleTeams {
    getAllSimpleTeams {
      id
      name
    }
  }
`;

const GET_PROJECTS = gql`
  query GetProjects {
    projects {
      id
      name
      teamId
    }
  }
`;

const GET_ISSUES = gql`
  query GetIssues {
    issues {
      id
      title
      teamKey
      projectId
      projectName
      state
      labels {
        id
        name
        color
      }
    }
  }
`;

const DBSyncPage: React.FC = () => {
  const [syncStatus, setSyncStatus] = useState<string>("");
  const [isSyncing, setIsSyncing] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  const [showSuccess, setShowSuccess] = useState<boolean>(false);
  const [syncDetails, setSyncDetails] = useState<string[]>([]);
  const [activeTab, setActiveTab] = useState<string>("teams");

  // Queries to fetch data that will be affected by the sync
  const {
    loading: teamsLoading,
    error: teamsError,
    data: teamsData,
    refetch: refetchTeams,
  } = useQuery(GET_TEAMS);

  const {
    loading: projectsLoading,
    error: projectsError,
    data: projectsData,
    refetch: refetchProjects,
  } = useQuery(GET_PROJECTS);

  const {
    loading: issuesLoading,
    error: issuesError,
    data: issuesData,
    refetch: refetchIssues,
  } = useQuery(GET_ISSUES);

  // GraphQL mutation for database sync
  const [syncDatabase] = useMutation(SYNC_DATABASE_MUTATION, {
    onCompleted: (data) => {
      setSyncStatus("Database synchronization completed successfully!");
      setSyncDetails((prev) => [
        ...prev,
        "Synchronization completed!",
        `Timestamp: ${
          data.synchronizeDatabase.timestamp || new Date().toISOString()
        }`,
      ]);
      setShowSuccess(true);

      // Refetch data to show updated state
      Promise.all([refetchTeams(), refetchProjects(), refetchIssues()]);
      setIsSyncing(false);
    },
    onError: (error) => {
      const errorMessage =
        error.message || "An error occurred during synchronization";

      setError(errorMessage);
      setSyncStatus("Database synchronization failed");
      setSyncDetails((prev) => [...prev, `Error: ${errorMessage}`]);
      setIsSyncing(false);
    },
  });

  // Function to trigger database synchronization
  const handleSync = () => {
    setIsSyncing(true);
    setSyncStatus("Starting comprehensive database synchronization...");
    setError(null);
    setShowSuccess(false);
    setSyncDetails([
      "Initializing synchronization...",
      "Connecting to Linear API...",
    ]);

    // Add progress updates for better UX - these are simulated since the actual work happens on the backend
    setTimeout(() => {
      if (isSyncing) {
        setSyncDetails((prev) => [
          ...prev,
          "Synchronizing teams from Linear...",
        ]);
      }
    }, 1000);

    setTimeout(() => {
      if (isSyncing) {
        setSyncDetails((prev) => [
          ...prev,
          "Synchronizing projects from Linear...",
        ]);
      }
    }, 3000);

    setTimeout(() => {
      if (isSyncing) {
        setSyncDetails((prev) => [
          ...prev,
          "Synchronizing issues and labels from Linear...",
        ]);
      }
    }, 5000);

    setTimeout(() => {
      if (isSyncing) {
        setSyncDetails((prev) => [...prev, "Cleaning up orphaned records..."]);
      }
    }, 7000);

    // Call the GraphQL mutation
    syncDatabase();
  };

  // Animation variants
  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: { staggerChildren: 0.05 },
    },
  };

  const itemVariants = {
    hidden: { opacity: 0, y: 10 },
    visible: {
      opacity: 1,
      y: 0,
      transition: { duration: 0.3 },
    },
  };

  const isLoading = teamsLoading || projectsLoading || issuesLoading;
  const hasError = teamsError || projectsError || issuesError;

  const renderTabContent = () => {
    switch (activeTab) {
      case "teams":
        return (
          <motion.div
            variants={containerVariants}
            initial="hidden"
            animate="visible"
            className="border rounded-lg overflow-hidden h-full"
          >
            <div className="bg-gray-100 px-4 py-3 border-b">
              <h3 className="text-lg font-medium">Teams</h3>
              <p className="text-sm text-gray-500">
                Total: {teamsData?.getAllSimpleTeams?.length || 0}
              </p>
            </div>
            <div className="p-4 overflow-y-auto" style={{ maxHeight: "400px" }}>
              {teamsData?.getAllSimpleTeams?.length > 0 ? (
                <ul className="space-y-2">
                  {teamsData.getAllSimpleTeams.map(
                    (team: SimpleTeam, index: number) => (
                      <motion.li
                        key={team.id}
                        variants={itemVariants}
                        custom={index}
                        className="bg-gray-50 p-3 rounded-lg hover:bg-gray-100 transition-colors"
                      >
                        <div className="font-medium">{team.name}</div>
                        <div className="text-sm text-gray-500 mt-1">
                          ID: {team.id}
                        </div>
                      </motion.li>
                    )
                  )}
                </ul>
              ) : (
                <p className="text-gray-500 text-center py-8">
                  No teams available
                </p>
              )}
            </div>
          </motion.div>
        );

      case "projects":
        return (
          <motion.div
            variants={containerVariants}
            initial="hidden"
            animate="visible"
            className="border rounded-lg overflow-hidden h-full"
          >
            <div className="bg-gray-100 px-4 py-3 border-b">
              <h3 className="text-lg font-medium">Projects</h3>
              <p className="text-sm text-gray-500">
                Total: {projectsData?.projects?.length || 0}
              </p>
            </div>
            <div className="p-4 overflow-y-auto" style={{ maxHeight: "400px" }}>
              {projectsData?.projects?.length > 0 ? (
                <ul className="space-y-2">
                  {projectsData.projects.map(
                    (project: SimpleProject, index: number) => (
                      <motion.li
                        key={project.id}
                        variants={itemVariants}
                        custom={index}
                        className="bg-gray-50 p-3 rounded-lg hover:bg-gray-100 transition-colors"
                      >
                        <div className="font-medium">{project.name}</div>
                        <div className="text-sm text-gray-500 mt-1">
                          ID: {project.id}
                          <br />
                          Team ID: {project.teamId}
                        </div>
                      </motion.li>
                    )
                  )}
                </ul>
              ) : (
                <p className="text-gray-500 text-center py-8">
                  No projects available
                </p>
              )}
            </div>
          </motion.div>
        );

      case "issues":
        return (
          <motion.div
            variants={containerVariants}
            initial="hidden"
            animate="visible"
            className="border rounded-lg overflow-hidden h-full"
          >
            <div className="bg-gray-100 px-4 py-3 border-b">
              <h3 className="text-lg font-medium">Issues</h3>
              <p className="text-sm text-gray-500">
                Total: {issuesData?.issues?.length || 0}
              </p>
            </div>
            <div className="p-4 overflow-y-auto" style={{ maxHeight: "400px" }}>
              {issuesData?.issues?.length > 0 ? (
                <ul className="space-y-2">
                  {issuesData.issues.map(
                    (issue: DBSyncIssue, index: number) => (
                      <motion.li
                        key={issue.id}
                        variants={itemVariants}
                        custom={index}
                        className="bg-gray-50 p-3 rounded-lg hover:bg-gray-100 transition-colors"
                      >
                        <div className="font-medium">{issue.title}</div>
                        <div className="text-sm text-gray-500 mt-1">
                          Project: {issue.projectName || "N/A"}
                          <br />
                          State: {issue.state || "N/A"}
                        </div>
                        {issue.labels && issue.labels.length > 0 && (
                          <div className="flex flex-wrap gap-1 mt-2">
                            {issue.labels.map((label) => (
                              <span
                                key={label.id}
                                className="text-xs px-2 py-1 rounded-full text-white"
                                style={{
                                  backgroundColor: label.color || "#888",
                                }}
                              >
                                {label.name}
                              </span>
                            ))}
                          </div>
                        )}
                      </motion.li>
                    )
                  )}
                </ul>
              ) : (
                <p className="text-gray-500 text-center py-8">
                  No issues available
                </p>
              )}
            </div>
          </motion.div>
        );

      case "sync":
        return (
          <motion.div
            variants={containerVariants}
            initial="hidden"
            animate="visible"
            className="border rounded-lg overflow-hidden h-full"
          >
            <div className="bg-gray-100 px-4 py-3 border-b">
              <h3 className="text-lg font-medium">Sync Details</h3>
            </div>
            <div className="p-4 overflow-y-auto" style={{ maxHeight: "400px" }}>
              {syncDetails.length > 0 ? (
                <ul className="space-y-2">
                  {syncDetails.map((detail, index) => (
                    <motion.li
                      key={index}
                      variants={itemVariants}
                      custom={index}
                      className="flex items-start gap-2"
                    >
                      <div className="text-green-500 mt-1">
                        <svg
                          xmlns="http://www.w3.org/2000/svg"
                          className="h-4 w-4"
                          fill="none"
                          viewBox="0 0 24 24"
                          stroke="currentColor"
                        >
                          <path
                            strokeLinecap="round"
                            strokeLinejoin="round"
                            strokeWidth={2}
                            d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"
                          />
                        </svg>
                      </div>
                      <span
                        className={
                          detail.startsWith("Error")
                            ? "text-red-600"
                            : "text-gray-700"
                        }
                      >
                        {detail}
                      </span>
                    </motion.li>
                  ))}
                </ul>
              ) : (
                <p className="text-gray-500 text-center py-8">
                  No synchronization has been run yet
                </p>
              )}
            </div>
          </motion.div>
        );

      default:
        return null;
    }
  };

  return (
    <>
      <div className="container mx-auto p-6 font-roboto-condensed">
        <motion.div
          className="bg-white shadow-lg rounded-lg overflow-hidden"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
        >
          <div className="bg-black text-white p-6">
            <h1 className="text-3xl font-bold">
              Linear Database Synchronization
            </h1>
            <p className="text-gray-300 mt-2">
              Synchronize your entire database with Linear - teams, projects,
              and issues
            </p>
          </div>

          <div className="p-6">
            <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 mb-8">
              <div>
                <h2 className="text-xl font-semibold">
                  Current Database State
                </h2>
                <div className="text-gray-600 mt-1">
                  <span className="inline-block mr-4">
                    <span className="font-semibold">Teams:</span>{" "}
                    {teamsData?.getAllSimpleTeams?.length || 0}
                  </span>
                  <span className="inline-block mr-4">
                    <span className="font-semibold">Projects:</span>{" "}
                    {projectsData?.projects?.length || 0}
                  </span>
                  <span className="inline-block">
                    <span className="font-semibold">Issues:</span>{" "}
                    {issuesData?.issues?.length || 0}
                  </span>
                </div>
              </div>

              <button
                onClick={handleSync}
                disabled={isSyncing || isLoading}
                className={`flex items-center gap-2 px-6 py-3 rounded-lg text-white font-medium transition-all ${
                  isSyncing || isLoading
                    ? "bg-gray-400 cursor-not-allowed"
                    : "bg-black hover:bg-gray-800"
                }`}
              >
                {isSyncing ? (
                  <>
                    <svg
                      className="animate-spin h-5 w-5 text-white"
                      xmlns="http://www.w3.org/2000/svg"
                      fill="none"
                      viewBox="0 0 24 24"
                    >
                      <circle
                        className="opacity-25"
                        cx="12"
                        cy="12"
                        r="10"
                        stroke="currentColor"
                        strokeWidth="4"
                      ></circle>
                      <path
                        className="opacity-75"
                        fill="currentColor"
                        d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                      ></path>
                    </svg>
                    Synchronizing...
                  </>
                ) : (
                  <>
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      className="h-5 w-5"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke="currentColor"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth={2}
                        d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"
                      />
                    </svg>
                    Synchronize Database
                  </>
                )}
              </button>
            </div>

            {syncStatus && (
              <motion.div
                className={`mb-6 p-4 rounded-lg ${
                  error
                    ? "bg-red-100 border-l-4 border-red-500"
                    : showSuccess
                    ? "bg-green-100 border-l-4 border-green-500"
                    : "bg-blue-100 border-l-4 border-blue-500"
                }`}
                initial={{ opacity: 0, y: -20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.3 }}
              >
                <p
                  className={`${
                    error
                      ? "text-red-700"
                      : showSuccess
                      ? "text-green-700"
                      : "text-blue-700"
                  } font-medium`}
                >
                  {syncStatus}
                </p>
                {error && <p className="text-red-500 mt-2">{error}</p>}
              </motion.div>
            )}

            {isLoading ? (
              <div className="text-center py-10">
                <svg
                  className="animate-spin h-10 w-10 text-black mx-auto"
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 24 24"
                >
                  <circle
                    className="opacity-25"
                    cx="12"
                    cy="12"
                    r="10"
                    stroke="currentColor"
                    strokeWidth="4"
                  ></circle>
                  <path
                    className="opacity-75"
                    fill="currentColor"
                    d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                  ></path>
                </svg>
                <p className="mt-4 text-gray-600">
                  Loading database information...
                </p>
              </div>
            ) : hasError ? (
              <div className="bg-red-100 p-4 rounded-lg">
                <p className="text-red-700">
                  Error loading data:{" "}
                  {teamsError?.message || projectsError?.message}
                </p>
              </div>
            ) : (
              <>
                <div className="mb-6 border-b">
                  <nav className="flex overflow-x-auto">
                    <button
                      onClick={() => setActiveTab("teams")}
                      className={`whitespace-nowrap px-4 py-2 font-medium text-sm ${
                        activeTab === "teams"
                          ? "border-b-2 border-black text-black"
                          : "text-gray-500 hover:text-gray-700"
                      }`}
                    >
                      Teams
                    </button>
                    <button
                      onClick={() => setActiveTab("projects")}
                      className={`whitespace-nowrap px-4 py-2 font-medium text-sm ${
                        activeTab === "projects"
                          ? "border-b-2 border-black text-black"
                          : "text-gray-500 hover:text-gray-700"
                      }`}
                    >
                      Projects
                    </button>
                    <button
                      onClick={() => setActiveTab("issues")}
                      className={`whitespace-nowrap px-4 py-2 font-medium text-sm ${
                        activeTab === "issues"
                          ? "border-b-2 border-black text-black"
                          : "text-gray-500 hover:text-gray-700"
                      }`}
                    >
                      Issues
                    </button>
                    <button
                      onClick={() => setActiveTab("sync")}
                      className={`whitespace-nowrap px-4 py-2 font-medium text-sm ${
                        activeTab === "sync"
                          ? "border-b-2 border-black text-black"
                          : "text-gray-500 hover:text-gray-700"
                      }`}
                    >
                      Sync Details
                    </button>
                  </nav>
                </div>

                <div className="min-h-[400px]">{renderTabContent()}</div>
              </>
            )}
          </div>
        </motion.div>
      </div>
    </>
  );
};

export default DBSyncPage;

// ====== FILE: src\app\graphql\adminOperations.ts ======

import { gql } from "@apollo/client";

export const GET_USERS = gql`
  query GetUsers {
    users {
      id
      email
      role
      teams {
        id
        name
        __typename
      }
      __typename
    }
  }
`;

export const GET_SIMPLE_TEAMS = gql`
  query GetAllSimpleTeams {
    getAllSimpleTeams {
      id
      name
      __typename
    }
  }
`;

export const UPDATE_USER_ROLE = gql`
  mutation UpdateUserRole($userId: Int!, $newRole: UserRole!) {
    updateUserRole(userId: $userId, newRole: $newRole) {
      id
      role
      __typename
    }
  }
`;

export const ADD_USER_TO_TEAM = gql`
  mutation AddUserToTeam($userId: Int!, $teamId: String!) {
    addUserToTeam(userId: $userId, teamId: $teamId) {
      id
      email
      teams {
        id
        name
        __typename
      }
      __typename
    }
  }
`;

export const REMOVE_USER_FROM_TEAM = gql`
  mutation RemoveUserFromTeam($userId: Int!, $teamId: String!) {
    removeUserFromTeam(userId: $userId, teamId: $teamId) {
      id
      email
      teams {
        id
        name
        __typename
      }
      __typename
    }
  }
`;

// ====== FILE: src\app\graphql\authOperations.ts ======

import { gql } from "@apollo/client";

export const LOGIN_MUTATION = gql`
  mutation Login($input: SignInInput!) {
    login(input: $input) {
      access_token
      user {
        id
        email
        role
      }
    }
  }
`;

export const SIGNUP_MUTATION = gql`
  mutation SignUp($input: SignUpInput!) {
    signup(input: $input) {
      access_token
      user {
        id
        email
        role
      }
    }
  }
`;

export const ME_QUERY = gql`
  query Me {
    me {
      id
      email
    }
  }
`;

export const LOGOUT_MUTATION = gql`
  mutation Logout {
    logout {
      success
    }
  }
`;

export const SYNC_DATABASE_MUTATION = gql`
  mutation SyncDatabase {
    synchronizeDatabase {
      status
      message
      timestamp
    }
  }
`;

// ====== FILE: src\app\graphql\timeKeeperOperations.ts ======

import { gql } from "@apollo/client";

export const PROJECTS_QUERY = gql`
  query GetProjects {
    projects {
      id
      name
      teamId
    }
  }
`;

export const RATES_QUERY = gql`
  query GetRates($teamId: String!) {
    rates(teamId: $teamId) {
      id
      name
      rate
    }
  }
`;

export const TOTAL_TIME_QUERY = gql`
  query GetTotalTimeForUserProject($userId: Float!, $projectId: String!) {
    getTotalTimeForUserProject(userId: $userId, projectId: $projectId)
  }
`;

export const USER_PROJECTS_QUERY = gql`
  query GetUserProjects {
    users {
      id
      teams {
        name
        projects {
          id
          name
        }
      }
    }
  }
`;

export const CREATE_TIME_MUTATION = gql`
  mutation CreateTime($timeInputCreate: TimeInputCreate!) {
    createTime(timeInputCreate: $timeInputCreate) {
      id
      startTime
      endTime
      totalElapsedTime
    }
  }
`;

export const UPDATE_TIME_MUTATION = gql`
  mutation UpdateTime($timeInputUpdate: TimeInputUpdate!) {
    updateTime(timeInputUpdate: $timeInputUpdate) {
      id
      startTime
      endTime
      totalElapsedTime
    }
  }
`;

// ====== FILE: src\app\hooks\useCurrentUser.ts ======

"use client";

import { useQuery } from "@apollo/client";
import { ME_QUERY } from "@/app/graphql/authOperations";
import { useAuthStore } from "@/app/lib/authStore";

interface MeQueryResult {
  me: {
    id: number;
    email: string;
    role: string;
  } | null;
}

export const useCurrentUser = () => {
  const {
    user: storeUser,
    accessToken,
    isAuthenticated,
    setUser,
    logout,
  } = useAuthStore();

  const { data, loading, error, refetch } = useQuery<MeQueryResult>(ME_QUERY, {
    fetchPolicy: "network-only",
    skip: !accessToken,
    context: {
      credentials: "include",
    },
    onCompleted: (data) => {
      if (data?.me) {
        console.log("ME_QUERY successful, user data:", data.me);
        setUser(data.me);
        if (!isAuthenticated) useAuthStore.setState({ isAuthenticated: true });
      } else {
        console.log("ME_QUERY returned null user, logging out.");
        if (accessToken) {
          logout();
        }
      }
    },
    onError: (error) => {
      console.error("Error fetching current user:", error);
      const isAuthError =
        error.graphQLErrors.some(
          (gqlError) =>
            gqlError.extensions?.code === "UNAUTHORIZED" ||
            gqlError.message.includes("Unauthorized")
        ) || error.networkError?.message.includes("401");

      if (isAuthError && accessToken) {
        console.log("ME_QUERY failed with auth error, logging out.");
        logout();
      }

      if (
        (error.message.includes("not authenticated") ||
          error.message.includes("Invalid token") ||
          error.message.includes("Unauthorized") ||
          error.message.includes("No auth token found in cookies")) &&
        !storeUser
      ) {
        useAuthStore.getState().logout();
      }
    },
  });
  const derivedIsAuthenticated = !!accessToken;
  return {
    currentUser: storeUser || data?.me || null,
    isLoading: loading,
    isAuthenticated: derivedIsAuthenticated,
    error,
    refetch,
  };
};

export default useCurrentUser;

// ====== FILE: src\app\hooks\useFeedbackState.ts ======

// src/app/hooks/useFeedbackState.ts
import { useState } from "react";
import type { FeedbackState } from "../types";

export const useFeedbackState = () => {
  const [submissionSuccess, setSubmissionSuccess] = useState(false);
  const [submissionError, setSubmissionError] = useState("");
  const [dateAlertMessage, setDateAlertMessage] = useState<string | null>(null);
  const [resetMessage, setResetMessage] = useState(false);

  const showSuccessMessage = () => {
    setSubmissionSuccess(true);
    setTimeout(() => setSubmissionSuccess(false), 2000);
  };

  const showResetMessage = () => {
    setResetMessage(true);
    setTimeout(() => setResetMessage(false), 2000);
  };

  const showDateAlert = (message: string) => {
    setDateAlertMessage(message);
    setTimeout(() => setDateAlertMessage(null), 3000);
  };

  return {
    state: {
      submissionSuccess,
      submissionError,
      dateAlertMessage,
      resetMessage,
    } as FeedbackState,
    actions: {
      setSubmissionError,
      showSuccessMessage,
      showResetMessage,
      showDateAlert,
    },
  };
};

// ====== FILE: src\app\hooks\useTimeKeeperData.ts ======

import { useQuery } from "@apollo/client";
import { useEffect, useState } from "react";
import { GET_MY_PROJECTS } from "@/app/components/Admin/totalTimeSpent";
import { useAuthStore } from "@/app/lib/authStore";
import { useReactiveVar } from "@apollo/client";
import { loggedInUserTeamsVersion } from "@/app/lib/apolloClient";

export interface MyProject {
  id: string;
  name: string;
  teamName?: string;
  teamId: string;
  __typename?: "Project";
}

interface GetMyProjectsQueryData {
  myProjects: MyProject[];
}

const useTimeKeeperData = (selectedProject: string | null) => {
  const user = useAuthStore((state) => state.user);
  const loggedInUserId = user?.id;
  const teamsVersion = useReactiveVar(loggedInUserTeamsVersion);

  const {
    data: myProjectsData,
    loading: loadingMyProjects,
    error: errorMyProjects,
    refetch: refetchMyProjects,
  } = useQuery<GetMyProjectsQueryData>(GET_MY_PROJECTS, {
    skip: !loggedInUserId,
    fetchPolicy: "cache-and-network",
    nextFetchPolicy: "cache-first",
  });

  const [userProjects, setUserProjects] = useState<MyProject[]>([]);
  const [currentTeamId, setCurrentTeamId] = useState<string | undefined>(
    undefined
  );

  useEffect(() => {
    if (myProjectsData?.myProjects) {
      setUserProjects(myProjectsData.myProjects);
    } else {
      setUserProjects([]);
    }
  }, [myProjectsData]);

  useEffect(() => {
    if (teamsVersion > 0 && loggedInUserId) {
      console.log(
        `[useTimeKeeperData] Detected team version change (${teamsVersion}), refetching my projects...`
      );
      refetchMyProjects().catch((err) => {
        console.error("Failed to refetch my projects on version change:", err);
      });
    }
  }, [teamsVersion, loggedInUserId, refetchMyProjects]);

  useEffect(() => {
    if (myProjectsData?.myProjects && selectedProject) {
      const project = myProjectsData.myProjects.find(
        (p) => p.id === selectedProject
      );
      if (project?.teamId) {
        setCurrentTeamId(project.teamId);
      } else {
        setCurrentTeamId(undefined);
      }
    } else if (!selectedProject) {
      setCurrentTeamId(undefined);
    }
  }, [myProjectsData, selectedProject]);

  return {
    userProjects,
    currentTeamId,
    loadingUserProjects: loadingMyProjects,
    errorUserProjects: errorMyProjects,
  };
};

export default useTimeKeeperData;

// ====== FILE: src\app\hooks\useTimekeeperHandlers.ts ======

import { formatISO } from "date-fns";
import type { TimerState, TimeEntry } from "../types";

interface HandlersConfig {
  timerState: TimerState & {
    initialStartTime: Date | null;
    pauseTimes: Date[];
    resumeTimes: Date[];
    calculateTotalActiveTime: () => number;
  };
  timerProjectId: string;
  timerRateId: string;
  userId: string;
  createTimeEntry: (data: {
    startTime: string;
    projectId: string;
    userId: number;
    rateId: number;
    totalElapsedTime: number;
  }) => Promise<{ data: { createTime: TimeEntry } }>;
  updateTime: (options: {
    timeInputUpdate: { id: number; endTime: string; totalElapsedTime: number };
  }) => Promise<{ data: { updateTime: TimeEntry } }>;
  currentEntryId: number | null;
  setCurrentEntryId: (id: number | null) => void;
  showSuccessMessage: () => void;
  setSubmissionError: (error: string) => void;
  showDateAlert: (message: string) => void;
  showResetMessage: () => void;
}

export const useTimeKeeperHandlers = ({
  timerState,
  timerProjectId,
  timerRateId,
  userId,
  createTimeEntry,
  updateTime,
  currentEntryId,
  setCurrentEntryId,
  showSuccessMessage,
  setSubmissionError,
  showDateAlert,
  showResetMessage,
}: HandlersConfig) => {
  const handleDateChange = (date: Date | null): void => {
    const now = new Date();
    if (date && date > now) {
      showDateAlert("Please select a current or past date/time.");
    } else {
      timerState.setStartTime(date);
    }
  };

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setSubmissionError("");
    if (
      !timerState.initialStartTime ||
      !timerProjectId ||
      !userId ||
      !timerRateId
    ) {
      const errorMsg =
        "Timer session data (Project/Rate) is incomplete. Cannot submit.";
      console.error(errorMsg, {
        start: timerState.initialStartTime,
        proj: timerProjectId,
        rate: timerRateId,
        user: userId,
      });
      setSubmissionError(errorMsg);
      return;
    }

    try {
      const submissionTime = new Date();
      const totalElapsedTimeMs = timerState.calculateTotalActiveTime();

      if (totalElapsedTimeMs < 0) {
        console.error("Calculated negative elapsed time, resetting timer.", {
          totalElapsedTimeMs,
        });
        setSubmissionError(
          "Timer error: Invalid elapsed time calculated. Please reset."
        );
        handleReset();
        return;
      }

      if (currentEntryId) {
        console.log(`Updating time entry ID ${currentEntryId}.`);
        await updateTime({
          timeInputUpdate: {
            id: currentEntryId,
            endTime: formatISO(submissionTime),
            totalElapsedTime: totalElapsedTimeMs,
          },
        });
        console.log("Successfully updated time entry ID:", currentEntryId);
      } else {
        console.log(
          `Creating new time entry for project ${timerProjectId}, rate ${timerRateId}`
        );
        const result = await createTimeEntry({
          startTime: formatISO(timerState.initialStartTime),
          projectId: timerProjectId,
          userId: parseFloat(userId),
          rateId: parseFloat(timerRateId),
          totalElapsedTime: totalElapsedTimeMs,
        });

        if (result?.data?.createTime?.id) {
          const newEntryId = result.data.createTime.id;
          setCurrentEntryId(newEntryId);
          console.log("Successfully created time entry, new ID:", newEntryId);
        } else {
          throw new Error(
            "Time entry created, but no ID was returned from the server."
          );
        }
      }

      showSuccessMessage();
      if (timerState.isRunning) {
        timerState.pause();
      }
    } catch (error: unknown) {
      console.error("Error during time entry submission:", error);
      if (error instanceof Error) {
        setSubmissionError(`Submit Failed: ${error.message}`);
      } else {
        setSubmissionError("An unknown error occurred during submission.");
      }
    }
  };

  const handleReset = (): void => {
    timerState.reset();
    showResetMessage();
  };

  return {
    handleDateChange,
    handleSubmit,
    handleReset,
  };
};

// ====== FILE: src\app\hooks\useTimekeeperQueries.ts ======

import { useQuery, useMutation } from "@apollo/client";
import {
  RATES_QUERY,
  TOTAL_TIME_QUERY,
  CREATE_TIME_MUTATION,
  UPDATE_TIME_MUTATION,
} from "@/app/graphql/timeKeeperOperations";
import type { TimeEntry, Rate } from "../types";

interface CreateTimeData {
  startTime: string;
  endTime?: string;
  projectId: string;
  userId: number;
  rateId: number;
  totalElapsedTime: number;
}

interface CreateTimeMutationVariables {
  timeInputCreate: CreateTimeData;
}

export const useTimeKeeperQueries = (
  currentTeamId: string | undefined,
  selectedProject: string,
  userId: string
) => {
  const { data: ratesData } = useQuery<{ rates: Rate[] }>(RATES_QUERY, {
    variables: { teamId: currentTeamId },
    skip: !currentTeamId,
    context: { credentials: "include" },
  });

  const {
    data: totalTimeData,
    loading: totalTimeLoading,
    error: totalTimeError,
    refetch,
  } = useQuery(TOTAL_TIME_QUERY, {
    variables: {
      userId: !isNaN(parseFloat(userId)) ? parseFloat(userId) : 0,
      projectId: selectedProject,
    },
    skip: !userId || !selectedProject,
    context: { credentials: "include" },
  });

  const [createTimeEntryMutation] = useMutation<
    { createTime: TimeEntry },
    CreateTimeMutationVariables
  >(CREATE_TIME_MUTATION);
  const [updateTimeEntryMutation] = useMutation<{ updateTime: TimeEntry }>(
    UPDATE_TIME_MUTATION
  );

  return {
    ratesData,
    totalTimeData,
    totalTimeLoading,
    totalTimeError,
    refetch,
    createTimeEntry: (
      timeData: CreateTimeData
    ): Promise<{ data: { createTime: TimeEntry } }> =>
      createTimeEntryMutation({
        variables: {
          timeInputCreate: timeData,
        },
        context: { credentials: "include" },
      }) as Promise<{ data: { createTime: TimeEntry } }>,

    updateTime: (options: {
      timeInputUpdate: {
        id: number;
        endTime: string;
        totalElapsedTime: number;
      };
    }): Promise<{ data: { updateTime: TimeEntry } }> =>
      updateTimeEntryMutation({
        variables: options,
        context: { credentials: "include" },
      }) as Promise<{ data: { updateTime: TimeEntry } }>,
  };
};

// ====== FILE: src\app\hooks\useTimer.ts ======

import { useState, useEffect, useRef, useCallback, useMemo } from "react";
import { format } from "date-fns";
import type { TimerState } from "../types";
import { useTimerStore } from "@/app/lib/timerStore";

export const useTimer = (
  selectedProjectId: string | null,
  selectedRateId: string | null
): TimerState & {
  initialStartTime: Date | null;
  pauseTimes: Date[];
  resumeTimes: Date[];
  calculateTotalActiveTime: () => number;
} => {
  const { isRunning, initialStartTimeISO, pauseTimesISO, resumeTimesISO } =
    useTimerStore();

  const {
    setTimerRunning,
    setInitialStartTime: setInitialStartTimeInStore,
    addPauseTime: addPauseTimeToStore,
    addResumeTime: addResumeTimeToStore,
    resetTimerState: resetTimerStateInStore,
    setActiveTimerProjectAndRate,
  } = useTimerStore();

  // --- Local state for display only ---
  const [displayTime, setDisplayTime] = useState<string>("00:00:00");
  const timerRef = useRef<number | null>(null);

  // --- Derive Date objects from ISO strings using useMemo ---
  const initialStartTime = useMemo(
    () => (initialStartTimeISO ? new Date(initialStartTimeISO) : null),
    [initialStartTimeISO]
  );

  const pauseTimes = useMemo(
    () => pauseTimesISO.map((iso) => new Date(iso)),
    [pauseTimesISO]
  );

  const resumeTimes = useMemo(
    () => resumeTimesISO.map((iso) => new Date(iso)),
    [resumeTimesISO]
  );

  // --- Calculation Logic (Timestamp-based) ---
  const calculateTotalActiveTime = useCallback((): number => {
    const now = new Date();
    // --- Logging Start ---
    console.log(
      `\n--- Calculating Time (${isRunning ? "Running" : "Paused"}) ---`
    );
    console.log(`Now: ${now.toISOString()}`);
    console.log(`Initial Start: ${initialStartTime?.toISOString() ?? "null"}`);
    console.log(
      `Pause Times: [${pauseTimes.map((d) => d.toISOString()).join(", ")}]`
    );
    console.log(
      `Resume Times: [${resumeTimes.map((d) => d.toISOString()).join(", ")}]`
    );
    // --- Logging End ---
    if (!initialStartTime) {
      console.log(`Calc Result: No initial start time, returning 0ms`);
      return 0;
    }

    let totalMs = 0;
    let segmentStart = initialStartTime;

    for (let i = 0; i < pauseTimes.length; i++) {
      const pauseTime = pauseTimes[i];
      if (pauseTime.getTime() < segmentStart.getTime()) {
        console.warn(
          `Calc Warning: Pause time ${i} (${pauseTime.toISOString()}) is before segment start (${segmentStart.toISOString()}). Skipping segment calculation.`
        );
        if (i < resumeTimes.length) {
          const resumeTime = resumeTimes[i];
          if (resumeTime.getTime() >= pauseTime.getTime()) {
            segmentStart = resumeTime;
            console.log(
              `Calc Recovery: Advanced segmentStart to resume time ${i}: ${segmentStart.toISOString()}`
            );
          } else {
            console.error(
              `Calc Error: Resume time ${i} (${resumeTime.toISOString()}) is before pause time ${i} (${pauseTime.toISOString()}). State invalid.`
            );
            return Math.max(totalMs, 0);
          }
        } else {
          console.error(
            `Calc Error: Pause time ${i} (${pauseTime.toISOString()}) before segment start (${segmentStart.toISOString()}) with no corresponding resume. State invalid.`
          );
          return Math.max(totalMs, 0);
        }
        continue;
      }

      // Calculate duration for this valid segment
      const segmentDuration = pauseTime.getTime() - segmentStart.getTime();
      totalMs += segmentDuration;
      console.log(
        `Calc Segment ${i}: Start=${segmentStart.toISOString()}, Pause=${pauseTime.toISOString()}, Duration=${segmentDuration}ms, AccTotal=${totalMs}ms`
      );

      // Check if there's a corresponding resume time to start the next segment
      if (i < resumeTimes.length) {
        const resumeTime = resumeTimes[i];
        // Basic sanity check: Resume should happen after Pause
        if (resumeTime.getTime() < pauseTime.getTime()) {
          console.warn(
            `Calc Warning: Resume time ${i} (${resumeTime.toISOString()}) is before pause time ${i} (${pauseTime.toISOString()}). Calculation stops here as if still paused.`
          );
          // Treat as if still paused
          console.log(
            `Calc Result: Returning ${totalMs}ms (invalid resume time ${i})`
          );
          return Math.max(totalMs, 0);
        }
        // Set the start for the next potential segment
        segmentStart = resumeTime;
        console.log(
          `Calc: Next segment starts at resume time ${i}: ${segmentStart.toISOString()}`
        );
      } else {
        // This was the last pause, and we haven't resumed. Timer is currently paused.
        console.log(
          `Calc Result: Returning ${totalMs}ms (currently paused after pause ${i})`
        );
        return Math.max(totalMs, 0);
      }
    }

    if (isRunning) {
      if (now.getTime() >= segmentStart.getTime()) {
        const finalSegmentDuration = now.getTime() - segmentStart.getTime();
        totalMs += finalSegmentDuration;
        console.log(
          `Calc: Added final running segment duration: ${finalSegmentDuration}ms (from ${segmentStart.toISOString()} to ${now.toISOString()})`
        );
      } else {
        console.warn(
          `Calc Warning: 'Now' (${now.toISOString()}) is before last segment start (${segmentStart.toISOString()}). Final segment duration is 0. Check system clock or state logic.`
        );
      }
    } else {
      console.log(
        `Calc: Loop finished, timer is not running. Total calculated in loop: ${totalMs}ms`
      );
    }

    console.log(`Calc Final Result: ${totalMs}ms`);
    console.log(`-------------------------------------`);
    return Math.max(totalMs, 0);
  }, [initialStartTime, pauseTimes, resumeTimes, isRunning]);

  // --- Update Display Logic ---
  const updateDisplay = useCallback(() => {
    const elapsedMs = calculateTotalActiveTime();
    const elapsedSeconds = Math.floor(elapsedMs / 1000);
    const formattedTime = format(
      new Date(0, 0, 0, 0, 0, elapsedSeconds),
      "HH:mm:ss"
    );
    setDisplayTime(formattedTime);
  }, [calculateTotalActiveTime]);

  // --- Effect for Initial Display pn Mount/Rehydration ---
  useEffect(() => {
    console.log("useTimer Mount Effect: Setting initial display time.");
    // Caslculate the time based on the state as it was loaded
    const initialElapsedMs = calculateTotalActiveTime();
    const initialElapsedSeconds = Math.floor(initialElapsedMs / 1000);
    const initialFormatedTime = format(
      new Date(0, 0, 0, 0, 0, initialElapsedSeconds),
      "HH:mm:ss"
    );
    setDisplayTime(initialFormatedTime);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  // --- Effect for Interval (Reads `isRunning` from store) ---
  useEffect(() => {
    if (isRunning) {
      console.log(
        "useTimer Effect: isRunning is true, starting/checking interval."
      );
      updateDisplay();
      // Ensure interval isn't already running before setting a new one
      if (timerRef.current === null) {
        timerRef.current = window.setInterval(updateDisplay, 1000);
        console.log(
          "useTimer Effect: Interval started with ID:",
          timerRef.current
        );
      }
    } else if (!isRunning && timerRef.current !== null) {
      console.log(
        "useTimer Effect: isRunning is false, clearing interval ID:",
        timerRef.current
      );
      clearInterval(timerRef.current);
      timerRef.current = null;
    }

    // Cleanup interval on unmount or if isRunning becomes false
    return () => {
      if (timerRef.current !== null) {
        console.log(
          "useTimer Effect: Cleanup clearing interval ID:",
          timerRef.current
        );
        clearInterval(timerRef.current);
        timerRef.current = null;
      }
    };
  }, [isRunning, updateDisplay]);

  // --- Control Functions (Dispatch actions to the store) ---
  const start = () => {
    if (!selectedProjectId || !selectedRateId) {
      console.error("Cannot start timer: Project and Rate must be selected.");
      return;
    }
    const now = new Date();
    // Check Zustand state directly for most up-to-date values before dispatching
    const {
      isRunning: currentlyRunning,
      initialStartTimeISO: currentInitialISO,
      pauseTimesISO: currentPausesISO,
      resumeTimesISO: currentResumesISO,
    } = useTimerStore.getState();

    if (!currentInitialISO) {
      console.log("useTimer start: Setting initial time in store.");
      setInitialStartTimeInStore(now);
      setActiveTimerProjectAndRate(selectedProjectId, selectedRateId);
      console.log(
        `useTimer start: Storing active project (${selectedProjectId}) and rate (${selectedRateId})`
      );
    } else if (!currentlyRunning) {
      if (currentPausesISO.length > currentResumesISO.length) {
        console.log("useTimer start: Adding RESUME time to store.");
        addResumeTimeToStore(now);
      } else {
        console.log(
          "useTimer start: Starting timer (not resuming from a pause)."
        );
      }
    } else {
      console.log(
        "useTimer start: Called while already running. Doing nothing."
      );
      return;
    }
    console.log("useTimer start: Setting isRunning=true in store.");
    setTimerRunning(true);
  };

  const pause = () => {
    if (isRunning) {
      console.log(
        "useTimer pause: Adding pause time and setting isRunning=false in store."
      );
      addPauseTimeToStore(new Date());
      setTimerRunning(false);
    } else {
      console.log("useTimer pause: Called when not running, doing nothing.");
    }
  };

  const reset = () => {
    console.log("useTimer reset: Calling resetTimerStateInStore.");
    resetTimerStateInStore();
    setDisplayTime("00:00:00");
  };

  const handleManualSetStartTime = (date: Date | null) => {
    console.log("useTimer handleManualSetStartTime:", date?.toISOString());
    if (!selectedProjectId || !selectedRateId) {
      console.error(
        "Cannot set start time: Project and Rate must be selected."
      );
      return;
    }
    const currentlyRunning = useTimerStore.getState().isRunning;
    if (currentlyRunning) {
      // Need to pause first *before* resetting state
      console.log("Pausing before manual time set...");
      addPauseTimeToStore(new Date());
      setTimerRunning(false);
    }
    // Now reset the rest of the state and set the new start time
    console.log("Resetting state and setting new start time in store...");
    resetTimerStateInStore();
    setInitialStartTimeInStore(date);
    setActiveTimerProjectAndRate(selectedProjectId, selectedRateId);
    console.log(
      `useTimer manual set: Storing active project (${selectedProjectId}) and rate (${selectedRateId})`
    );
    setDisplayTime("00:00:00");
  };

  return {
    isRunning,
    startTime: initialStartTime,
    displayTime,
    start,
    pause,
    reset,
    setStartTime: handleManualSetStartTime,
    initialStartTime: initialStartTime,
    pauseTimes: pauseTimes,
    resumeTimes: resumeTimes,
    calculateTotalActiveTime,
  };
};

// ====== FILE: src\app\issuesPage\page.tsx ======

"use client";
import React, {
  useMemo,
  useState,
  useEffect,
  useRef,
  useCallback,
} from "react";
import { gql, useQuery, useApolloClient } from "@apollo/client";
import NavigationBar from "../components/NavigationBar";
import { io, Socket } from "socket.io-client";

type Label = {
  id: string;
  name: string;
  color: string;
  parentId?: string;
  __typename?: "Label";
};

type Issue = {
  id: string;
  createdAt: string;
  updatedAt: string;
  title: string;
  dueDate: string | null;
  projectId: string;
  priorityLabel: string;
  identifier: string;
  assigneeName: string | null;
  projectName: string;
  state: string;
  teamKey: string | null;
  teamName: string | null;
  labels: Label[];
  __typename?: "Issue";
};

type IssueUpdatePayload = {
  action: "create" | "update" | "remove";
  issue: Partial<Issue> & { id: string };
};

type GroupedIssues = {
  [key: string]: Issue[];
};

const GET_ISSUES = gql`
  query GetIssues {
    issues {
      id
      createdAt
      updatedAt
      title
      dueDate
      projectId
      priorityLabel
      identifier
      assigneeName
      projectName
      state
      teamKey
      teamName
      labels {
        id
        name
        color
        parentId
        __typename
      }
      __typename
    }
  }
`;

const IssuesComponent: React.FC = () => {
  const client = useApolloClient();
  const { loading, error, data, refetch } = useQuery<{ issues: Issue[] }>(
    GET_ISSUES,
    {
      fetchPolicy: "cache-and-network",
      nextFetchPolicy: "cache-first",
    }
  );

  const [selectedAssignee, setSelectedAssignee] = useState<string | null>(null);
  const [selectedTeam, setSelectedTeam] = useState<string | null>(null);
  const [socketConnected, setSocketConnected] = useState(false);
  const socket = useRef<Socket | null>(null);
  const [reconnectAttempts, setReconnectAttempts] = useState(0);
  const [connectionStatusMessage, setConnectionStatusMessage] =
    useState("Connecting...");
  const maxReconnectAttempts = 5;

  const handleSelectAssignee = useCallback((assignee: string | null) => {
    setSelectedAssignee(assignee);
  }, []);

  const handleSelectTeam = useCallback((team: string | null) => {
    setSelectedTeam(team);
  }, []);

  const uniqueTeams = useMemo(() => {
    const teams = new Set<string>();
    data?.issues?.forEach((issue) => {
      if (issue.teamName) teams.add(issue.teamName);
    });
    return Array.from(teams);
  }, [data?.issues]);

  const uniqueAssignees = useMemo(() => {
    const assignees = new Set<string>();
    data?.issues?.forEach((issue) => {
      if (issue.assigneeName) assignees.add(issue.assigneeName);
    });
    return Array.from(assignees).sort();
  }, [data?.issues]);

  const filteredIssues = useMemo(() => {
    return (
      data?.issues?.filter((issue) => {
        const teamMatch = !selectedTeam || issue.teamName === selectedTeam;
        const assigneeMatch =
          !selectedAssignee || issue.assigneeName === selectedAssignee;
        return teamMatch && assigneeMatch;
      }) ?? []
    );
  }, [data?.issues, selectedTeam, selectedAssignee]);

  const groupedIssues = useMemo(() => {
    const groups: GroupedIssues = {};
    filteredIssues.forEach((issue) => {
      const stateName = issue.state || "Unknown State";
      if (!groups[stateName]) {
        groups[stateName] = [];
      }
      groups[stateName].push(issue);
    });

    const sortedGroupKeys = Object.keys(groups).sort();
    const sortedGroups: GroupedIssues = {};
    sortedGroupKeys.forEach((key) => {
      groups[key].sort(
        (a, b) =>
          new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime()
      );
      sortedGroups[key] = groups[key];
    });
    return sortedGroups;
  }, [filteredIssues]);

  // --- WebSocket Connection and Cache Update Effect ---
  useEffect(() => {
    let connectTimeout: NodeJS.Timeout | null = null; //manage retry timeouts

    const connectSocket = () => {
      if (socket.current || reconnectAttempts >= maxReconnectAttempts) {
        if (reconnectAttempts >= maxReconnectAttempts) {
          setConnectionStatusMessage("Connection failed (Max attempts)");
          console.error("Maximum reconnection attempts reached.");
        }
        return;
      }
      setConnectionStatusMessage(
        `Connecting (Attempt ${reconnectAttempts + 1})...`
      );
      console.log(
        `Attempting WS connection (attempt ${reconnectAttempts + 1})...`
      );

      const wsUrl =
        process.env.NEXT_PUBLIC_BACKEND_WEBSOCKET_URL ||
        "http://localhost:8080";
      socket.current = io(wsUrl, {
        transports: ["websocket"],
        path: "/socket.io",
        reconnection: false,
        timeout: 10000,
      });

      const currentSocket = socket.current;

      currentSocket.on("connect", () => {
        console.log(`WebSocket connected: ${currentSocket.id}`);
        setSocketConnected(true);
        setConnectionStatusMessage("Live Updates On");
        setReconnectAttempts(0);
      });

      currentSocket.on("connect_error", (error: Error) => {
        console.error(`WebSocket connect_error: ${error.message}`);
        currentSocket.disconnect();
        socket.current = null;
        setSocketConnected(false);
        setConnectionStatusMessage("Connection Error");
        setReconnectAttempts((prev) => prev + 1);
        if (reconnectAttempts + 1 < maxReconnectAttempts) {
          connectTimeout = setTimeout(
            connectSocket,
            3000 + Math.random() * 2000
          );
        } else {
          setConnectionStatusMessage("Connection failed (Max attempts)");
        }
      });

      currentSocket.on("disconnect", (reason: string) => {
        console.log(`WebSocket disconnected: ${reason}`);
        setSocketConnected(false);
        socket.current = null;
        if (
          reason !== "io client disconnect" &&
          reconnectAttempts < maxReconnectAttempts
        ) {
          setConnectionStatusMessage("Disconnected. Retrying...");
          setReconnectAttempts((prev) => prev + 1);
          connectTimeout = setTimeout(
            connectSocket,
            3000 + Math.random() * 2000
          );
        } else if (reason === "io client disconnect") {
          setConnectionStatusMessage("Disconnected");
        }
      });

      // --- Apollo Cache Update Logic ---
      currentSocket.on("issueUpdate", (payload: IssueUpdatePayload) => {
        console.log("Received WS issue update:", payload);

        if (!payload || !payload.issue || !payload.issue.id) {
          console.error("Received invalid issue update payload:", payload);
          return;
        }
        const issueId = payload.issue.id;

        try {
          client.cache.updateQuery<{ issues: Issue[] }>(
            { query: GET_ISSUES },
            (existingData) => {
              if (!existingData) {
                console.warn(
                  "Cache data for GET_ISSUES not found during update. Skipping cache update."
                );
                return existingData;
              }

              let updatedIssues: Issue[];

              switch (payload.action) {
                case "create":
                  const newIssue = {
                    ...payload.issue,
                    __typename: "Issue",
                    labels:
                      payload.issue.labels?.map((l) => ({
                        ...l,
                        __typename: "Label",
                      })) ?? [],
                  } as Issue;
                  if (
                    !existingData.issues.some(
                      (issue) => issue.id === newIssue.id
                    )
                  ) {
                    updatedIssues = [...existingData.issues, newIssue];
                    console.log(`Apollo cache: Added issue ${newIssue.id}`);
                  } else {
                    console.warn(
                      `Issue ${newIssue.id} (create event) already exists. Updating instead.`
                    );
                    updatedIssues = existingData.issues.map((issue) =>
                      issue.id === newIssue.id ? newIssue : issue
                    );
                  }
                  break;

                case "update":
                  const issueIdToUpdate = payload.issue.id;
                  const incomingUpdateData = payload.issue; // Keep a reference

                  // Find the existing issue defensively
                  const existingIssueIndex = existingData.issues.findIndex(
                    (issue) => issue.id === issueIdToUpdate
                  );

                  if (existingIssueIndex === -1) {
                    // Issue not found in cache, maybe it was filtered out or deleted?
                    console.warn(
                      `Issue ${issueIdToUpdate} (update event) not found in cache. Skipping cache update.`
                    );
                    updatedIssues = existingData.issues; // No change
                    break;
                  }

                  // Get a *copy* of the existing issue to modify
                  const issueToUpdate = {
                    ...existingData.issues[existingIssueIndex],
                  };

                  // Defensively determine the updated labels
                  let finalLabels: Label[];
                  if (incomingUpdateData.labels !== undefined) {
                    // Use new labels from payload if they exist (even if empty array)
                    finalLabels = (incomingUpdateData.labels || []).map(
                      (l) => ({
                        ...l,
                        __typename: "Label",
                      })
                    );
                  } else {
                    // Otherwise, keep the existing labels (handle if existing labels were null/undefined)
                    finalLabels = (issueToUpdate.labels || []).map((l) => ({
                      ...l,
                      __typename: "Label",
                    }));
                  }

                  // Create the fully updated issue object by merging
                  // Start with the existing, layer the incoming payload, then explicitly set labels and typename
                  const mergedUpdatedIssue: Issue = {
                    ...issueToUpdate, // Base with existing cached data
                    ...incomingUpdateData, // Override with fields from the payload
                    __typename: "Issue",
                    labels: finalLabels,
                  };

                  // Create the new array for the cache
                  updatedIssues = [...existingData.issues]; // Create a mutable copy
                  updatedIssues[existingIssueIndex] = mergedUpdatedIssue; // Replace the item at the found index

                  console.log(
                    `Apollo cache: Prepared update for issue ${mergedUpdatedIssue.id}`
                  );
                  break;

                case "remove":
                  updatedIssues = existingData.issues.filter(
                    (issue) => issue.id !== issueId
                  );
                  console.log(`Apollo cache: Removed issue ${issueId}`);
                  break;

                default:
                  console.warn("Unknown issue update action:", payload);
                  updatedIssues = existingData.issues;
              }
              return { issues: updatedIssues };
            }
          );
        } catch (cacheError) {
          console.error("Error updating Apollo cache:", cacheError);
        }
      });
    };

    connectSocket();

    return () => {
      console.log(
        "Cleaning up WebSocket connection/timeouts on component unmount/reconnect"
      );
      if (connectTimeout) clearTimeout(connectTimeout);
      if (socket.current) {
        socket.current.disconnect();
        socket.current = null;
      }
    };
  }, [client, reconnectAttempts]);

  // --- Manual Refresh ---
  const handleRefresh = useCallback(() => {
    console.log("Manual refresh triggered.");
    setConnectionStatusMessage("Refreshing...");
    refetch()
      .then(() => {
        console.log("Manual refresh successful");
        setConnectionStatusMessage(
          socketConnected ? "Live Updates On" : "Disconnected"
        );
      })
      .catch((err) => {
        console.error("Manual refresh failed:", err);
        setConnectionStatusMessage("Refresh failed");
      });
  }, [refetch, socketConnected]);

  // --- Render Logic ---
  const renderContent = () => {
    if (loading && !data) {
      return (
        <p className="text-center py-10 text-gray-500">Loading issues...</p>
      );
    }
    if (error) {
      return (
        <p className="text-center py-10 text-red-500">
          Error loading issues: {error.message}
        </p>
      );
    }
    if (Object.keys(groupedIssues).length === 0) {
      return (
        <p className="text-center py-10 text-gray-500">
          No issues match the current filters.
        </p>
      );
    }

    // Render the grouped issues board
    return Object.entries(groupedIssues).map(([stateName, issues]) => (
      <div key={stateName} className="mb-6">
        <h2 className="text-xl font-semibold mb-3 sticky top-0 bg-gray-100 p-2 z-5 border-b capitalize">
          {stateName.replace(/_/g, " ")} ({issues.length}){" "}
        </h2>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {issues.map((issue) => (
            <div
              key={issue.id}
              className="border border-gray-200 rounded p-4 shadow hover:shadow-md transition-shadow duration-200 bg-white"
            >
              <h3 className="text-md font-semibold mb-1">{issue.title}</h3>
              <p className="text-xs text-gray-500 mb-2">
                {issue.identifier} | Prj: {issue.projectName}
              </p>
              <div className="flex flex-wrap gap-1 mb-2 min-h-[18px]">
                {issue.labels?.map((label) => (
                  <span
                    key={label.id}
                    style={{ backgroundColor: label.color || "#cccccc" }}
                    className="text-white text-xxs font-semibold px-1.5 py-0.5 rounded"
                  >
                    {label.name}
                  </span>
                ))}
              </div>
              <div className="mt-1 text-xs text-gray-600 space-y-0.5">
                <p>
                  <span className="font-medium">Priority:</span>{" "}
                  {issue.priorityLabel}
                </p>
                <p>
                  <span className="font-medium">Team:</span>{" "}
                  {issue.teamName || "N/A"}
                </p>
                <p>
                  <span className="font-medium">Assignee:</span>{" "}
                  {issue.assigneeName || "Unassigned"}
                </p>
                {issue.dueDate && (
                  <p>
                    <span className="font-medium">Due:</span>{" "}
                    {new Date(issue.dueDate).toLocaleDateString()}
                  </p>
                )}
                <p className="text-gray-400 pt-1 text-xxs">
                  Updated: {new Date(issue.updatedAt).toLocaleString()}
                </p>
              </div>
            </div>
          ))}
        </div>
      </div>
    ));
  };

  return (
    <>
      <NavigationBar />
      <div className="container mx-auto p-4 font-roboto-condensed">
        {/* --- Filter UI --- */}
        <div className="flex mb-4 flex-wrap items-start gap-2 border-b pb-4">
          {/* Team Filters */}
          <div className="flex items-center flex-wrap gap-1">
            <span className="text-sm font-medium mr-2 flex-shrink-0">
              Teams:
            </span>
            <button
              onClick={() => handleSelectTeam(null)}
              className={`p-1 px-2 m-1 text-xs ${
                !selectedTeam
                  ? "bg-blue-500 text-white"
                  : "bg-gray-200 text-black"
              } rounded hover:bg-gray-300`}
            >
              ALL
            </button>
            {uniqueTeams.map((team) => (
              <button
                key={team}
                onClick={() => handleSelectTeam(team)}
                className={`p-1 px-2 m-1 uppercase text-xs ${
                  selectedTeam === team ? "bg-green-500" : "bg-black"
                } text-white rounded hover:bg-gray-800`}
              >
                {team}
              </button>
            ))}
          </div>
          {/* Assignee Filters */}
          <div className="flex items-center flex-wrap gap-1">
            <span className="text-sm font-medium mr-2 flex-shrink-0">
              Assignees:
            </span>
            <button
              onClick={() => handleSelectAssignee(null)}
              className={`p-1 px-2 m-1 text-xs ${
                !selectedAssignee
                  ? "bg-blue-500 text-white"
                  : "bg-gray-200 text-black"
              } rounded hover:bg-gray-300`}
            >
              ALL
            </button>
            {uniqueAssignees.map((assignee) => (
              <button
                key={assignee}
                onClick={() => handleSelectAssignee(assignee)}
                className={`p-1 px-2 m-1 uppercase text-xs ${
                  selectedAssignee === assignee ? "bg-green-500" : "bg-black"
                } text-white rounded hover:bg-gray-800`}
              >
                {assignee || "Unassigned"}
              </button>
            ))}
          </div>
        </div>

        {/* --- Manual Refresh & Connection Status --- */}
        <div
          style={{
            position: "fixed",
            bottom: "20px",
            right: "20px",
            zIndex: 10,
          }}
        >
          <button
            onClick={handleRefresh}
            className="..."
            aria-label="Refresh Issues"
          >
            {/* Refresh Icon */}
            <svg
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              strokeWidth={1.5}
              stroke="currentColor"
              className="w-6 h-6"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                d="M16.023 9.348h4.992v-.001M2.985 19.644v-4.992m0 0h4.992m-4.993 0 3.181 3.183a8.25 8.25 0 0 0 13.803-3.7M4.031 9.865a8.25 8.25 0 0 1 13.803-3.7l3.181 3.182m0-4.991v4.99"
              />
            </svg>
          </button>
        </div>
        <div className="fixed bottom-4 left-4 flex items-center bg-white px-2 py-1 rounded shadow-md text-xs z-10">
          <div
            className={`w-2 h-2 rounded-full mr-2 ${
              socketConnected ? "bg-green-500 animate-pulse" : "bg-red-500"
            }`}
          ></div>
          <span> {connectionStatusMessage} </span>
        </div>

        {/* --- Issue Board Content --- */}
        <div className="mt-4">{renderContent()}</div>
      </div>
    </>
  );
};

export default IssuesComponent;

// ====== FILE: src\app\lib\apolloClient.ts ======

import {
  ApolloClient,
  InMemoryCache,
  createHttpLink,
  from,
  Observable,
  makeVar,
} from "@apollo/client";
import { setContext } from "@apollo/client/link/context";
import { onError } from "@apollo/client/link/error";
import { useAuthStore, getAccessToken } from "./authStore";
import gql from "graphql-tag";

const REFRESH_TOKEN_MUTATION = gql`
  mutation RefreshToken {
    refreshToken {
      access_token
    }
  }
`;

export const loggedInUserTeamsVersion = makeVar(0);

const authLink = setContext((operation, { headers }) => {
  if (operation.operationName === "RefreshToken") {
    return { headers };
  }
  const token = getAccessToken();
  const authHeaders = token ? { Authorization: `Bearer ${token}` } : {};
  return {
    headers: {
      ...headers,
      ...authHeaders,
      "content-type": "application/json",
    },
  };
});

let isRefreshing = false;
let pendingRequests: ((newAccessToken: string) => void)[] = [];

const resolvePendingRequests = (newAccessToken: string) => {
  pendingRequests.map((callback) => callback(newAccessToken));
  pendingRequests = [];
};

const errorLink = onError(
  ({ graphQLErrors, networkError, operation, forward }) => {
    if (graphQLErrors) {
      console.log("ErrorLink: Detected graphQLErrors:", graphQLErrors);
      for (const err of graphQLErrors) {
        console.log("GraphQL Error received:", JSON.stringify(err, null, 2));
        const extensions = err.extensions || {};
        interface OriginalError {
          statusCode?: number;
          message?: string;
        }
        const originalError = extensions.originalError as OriginalError;
        const isAuthError =
          extensions?.code === "UNAUTHORIZED" ||
          originalError?.statusCode === 401 ||
          err.message.toLowerCase().includes("unauthorized") ||
          err.message.toLowerCase().includes("access denied") ||
          err.message.toLowerCase().includes("invalid token") ||
          err.message.toLowerCase().includes("expired token");

        if (isAuthError && operation.operationName !== "RefreshToken") {
          console.log(
            `Auth error on operation '${operation.operationName}'. Initiating refresh.`
          );

          if (!isRefreshing) {
            isRefreshing = true;
            console.log("Starting token refresh via mutation...");

            client
              .mutate<{ refreshToken: { access_token: string } }>({
                mutation: REFRESH_TOKEN_MUTATION,
                context: {
                  credentials: "include",
                },
              })
              .then(({ data }) => {
                const newAccessToken = data?.refreshToken.access_token;
                if (!newAccessToken) {
                  console.error(
                    "Token refresh succeeded but no new access token received."
                  );
                  throw new Error("New access token not received.");
                }
                console.log(
                  "Token refresh successful. New access token obtained."
                );
                useAuthStore.getState().setAccessToken(newAccessToken);
                resolvePendingRequests(newAccessToken);
              })
              .catch((refreshError) => {
                console.error("Token refresh mutation failed:", refreshError);
                useAuthStore.getState().logout();
                pendingRequests = [];
                if (window.location.pathname !== "/login") {
                  window.location.href = "/login";
                }
              })
              .finally(() => {
                isRefreshing = false;
                console.log("Token refresh process finished.");
              });
          }

          return new Observable((observer) => {
            pendingRequests.push((newAccessToken) => {
              console.log(
                `Retrying operation '${operation.operationName}' with new token.`
              );
              operation.setContext(({ headers = {} }) => ({
                headers: {
                  ...headers,
                  Authorization: `Bearer ${newAccessToken}`,
                },
              }));
              forward(operation).subscribe(observer);
            });
          });
        }
        if (
          extensions?.code === "FORBIDDEN" ||
          originalError?.statusCode === 403
        ) {
          useAuthStore.getState().setForbidden(true);
        }
      }
    }

    if (networkError) {
      console.error(`[Network error]: ${networkError.message}`, networkError);
    }
  }
);

const httpLink = createHttpLink({
  uri: `${process.env.NEXT_PUBLIC_BACKEND_URL}/graphql`,
  fetchOptions: {
    method: "POST",
  },
  credentials: "include",
});

const client = new ApolloClient({
  link: from([errorLink, authLink, httpLink]),
  cache: new InMemoryCache(),
  defaultOptions: {
    watchQuery: { fetchPolicy: "cache-and-network" },
    query: { fetchPolicy: "network-only", errorPolicy: "all" },
    mutate: { errorPolicy: "all" },
  },
});

export default client;

export const clientLogout = async () => {
  try {
    await client.mutate({
      mutation: gql`
        mutation Logout {
          logout {
            success
          }
        }
      `,
      context: { credentials: "include" },
    });
    console.log("Backend logout mutation successful.");
  } catch (error) {
    console.error("Error calling backend logout mutation:", error);
  } finally {
    useAuthStore.getState().logout();
    await client.resetStore();
    console.log("Frontend state cleared.");
    if (window.location.pathname !== "/login") {
      window.location.href = "/login";
    }
  }
};

// ====== FILE: src\app\lib\authStore.ts ======

import { create } from "zustand";
import { persist } from "zustand/middleware";

interface User {
  id: number;
  email: string;
  role: string;
}

interface AuthState {
  user: User | null;
  accessToken: string | null;
  isForbidden: boolean;
  isAuthenticated: boolean;
  setAuth: (token: string | null, user: User | null) => void;
  setUser: (user: User | null) => void;
  setAccessToken: (token: string | null) => void;
  setForbidden: (isForbidden: boolean) => void;
  logout: () => void;
}

export const useAuthStore = create<AuthState>()(
  persist(
    (set) => ({
      user: null,
      accessToken: null,
      isForbidden: false,
      isAuthenticated: false,
      setAuth: (token, user) =>
        set({
          accessToken: token,
          user: user,
          isAuthenticated: !!token,
          isForbidden: false,
        }),
      setUser: (user) => set({ user }),
      setAccessToken: (token) =>
        set({
          accessToken: token,
          isAuthenticated: !!token,
        }),
      setForbidden: (isForbidden) => set({ isForbidden }),
      logout: () => {
        console.log("AuthStore: Logging out - clearing state.");
        set({
          user: null,
          accessToken: null,
          isAuthenticated: false,
          isForbidden: false,
        });
      },
    }),
    {
      name: "auth-storage",
      partialize: (state) => ({
        user: state.user,
      }),

      onRehydrateStorage: () => {
        console.log("AuthStore: Rehydrating user from storage.");

        return (_state, error) => {
          if (error) console.error("AuthStore: Error rehydrating:", error);
        };
      },
    }
  )
);

export const getAccessToken = () => useAuthStore.getState().accessToken;

// ====== FILE: src\app\lib\timerStore.ts ======

import { create } from "zustand";
import { persist, createJSONStorage } from "zustand/middleware";

interface TimerPersistedState {
  isRunning: boolean;
  initialStartTimeISO: string | null;
  pauseTimesISO: string[];
  resumeTimesISO: string[];
  currentEntryId: number | null;
  projectIdForTimer: string | null;
  rateIdForTimer: string | null;
  activeTimerProjectId: string | null;
  activeTimerRateId: string | null;
}

interface TimerActions {
  setTimerRunning: (running: boolean) => void;
  setInitialStartTime: (date: Date | null) => void;
  addPauseTime: (date: Date) => void;
  addResumeTime: (date: Date) => void;
  setCurrentEntryId: (id: number | null) => void;
  setActiveTimerProjectAndRate: (
    projectId: string | null,
    rateId: string | null
  ) => void;
  resetTimerState: () => void;
}

const initialState: TimerPersistedState = {
  isRunning: false,
  initialStartTimeISO: null,
  pauseTimesISO: [],
  resumeTimesISO: [],
  currentEntryId: null,
  projectIdForTimer: null,
  rateIdForTimer: null,
  activeTimerProjectId: null,
  activeTimerRateId: null,
};

export const useTimerStore = create<TimerPersistedState & TimerActions>()(
  persist(
    (set) => ({
      ...initialState,
      setTimerRunning: (running) => set({ isRunning: running }),
      setInitialStartTime: (date) =>
        set({ initialStartTimeISO: date ? date.toISOString() : null }),
      addPauseTime: (date) =>
        set((state) => ({
          pauseTimesISO: [...state.pauseTimesISO, date.toISOString()],
        })),
      addResumeTime: (date) =>
        set((state) => ({
          resumeTimesISO: [...state.resumeTimesISO, date.toISOString()],
        })),
      setCurrentEntryId: (id) => set({ currentEntryId: id }),
      setActiveTimerProjectAndRate: (projectId, rateId) =>
        set({
          activeTimerProjectId: projectId,
          activeTimerRateId: rateId,
        }),
      resetTimerState: () => {
        console.log("Resetting timer state in Zustand store");
        set({ ...initialState });
      },
    }),
    {
      name: "timer-storage",
      storage: createJSONStorage(() => localStorage),
      onRehydrateStorage: () => {
        console.log("Zustand timer state rehydrated from localStorage");
        return (state, error) => {
          if (error) {
            console.error("Error rehydrating timer state:", error);
          }
        };
      },
    }
  )
);

// ====== FILE: src\app\lib\utils.ts ======

import { type ClassValue, clsx } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

// ====== FILE: src\app\login\page.tsx ======

"use client";

import React, { useState } from "react";
import Link from "next/link";
import { useRouter } from "next/navigation";
import Image from "next/image";
import { useMutation } from "@apollo/client";
import { LOGIN_MUTATION } from "@/app/graphql/authOperations";
import { useAuthStore } from "@/app/lib/authStore";
import client from "@/app/lib/apolloClient";

interface LoginData {
  login: {
    access_token: string;
    user: {
      id: number;
      email: string;
      role: string;
    };
  };
}

const Login: React.FC = () => {
  const [email, setEmail] = useState<string>("");
  const [password, setPassword] = useState<string>("");
  const [errorMessage, setErrorMessage] = useState<string | null>(null);
  const router = useRouter();
  const setAuth = useAuthStore((state) => state.setAuth);

  const [login, { loading }] = useMutation<LoginData>(LOGIN_MUTATION, {
    client: client,
    onCompleted: (data) => {
      if (data?.login?.access_token && data?.login?.user) {
        const { access_token, user } = data.login;
        console.log("Login successful. Storing token and user data.");
        setAuth(access_token, user);
        router.push("/timeKeeper");
      } else {
        const errorMsg = "Login failed: Incomplete data received from server.";
        setErrorMessage(errorMsg);
        console.error(errorMsg, data);
      }
    },
    onError: (error) => {
      console.error("Login mutation error:", error);

      if (
        error.message.includes("Invalid email or password") ||
        error.message.includes("Unauthorized")
      ) {
        setErrorMessage("Invalid email or password.");
      } else {
        setErrorMessage(
          error.message || "An unexpected error occurred during login."
        );
      }
    },
  });

  const handleLogin = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setErrorMessage(null);
    login({
      variables: {
        input: { email, password },
      },
    });
  };

  return (
    <div className="flex flex-col items-center justify-center h-screen bg-gray-100">
      <div className="p-8 bg-white rounded shadow-md w-96">
        <p className="text-gray-600 mb-1 text-center">WELCOME BACK</p>
        <h1 className="text-center text-2xl font-bold mb-4">
          Log In To Your Account
        </h1>

        <form onSubmit={handleLogin}>
          <input
            className="mb-2 p-2 w-full border rounded focus:outline-none focus:ring-2 focus:ring-blue-400"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            placeholder="Email"
          />

          <input
            className="mb-4 p-2 w-full border rounded focus:outline-none focus:ring-2 focus:ring-blue-400"
            type="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            placeholder="Password"
          />

          <button
            type="submit"
            disabled={loading}
            className="w-full bg-black text-white p-2 rounded focus:outline-none hover:bg-gray-700 mb-4 disabled:bg-gray-400"
          >
            {loading ? "LOGGING IN..." : "CONTINUE"}
          </button>

          <div className="text-center">
            <p className=" cursor-pointer ">
              New User ?{" "}
              <Link href="/signup" className="text-blue-500">
                SIGN UP HERE
              </Link>
            </p>
          </div>

          {errorMessage && <p className="mt-4 text-red-500">{errorMessage}</p>}
        </form>
        <div className="flex justify-end items-end mt-20">
          <Image
            src="/logo.svg"
            alt="Enablment-tt Logo"
            width={150}
            height={40}
          />
        </div>
      </div>
    </div>
  );
};

export default Login;

// ====== FILE: src\app\signup\page.tsx ======

"use client";
import React, { useState } from "react";
import Link from "next/link";
import { useRouter } from "next/navigation";
import Image from "next/image";
import { useMutation } from "@apollo/client";
import { SIGNUP_MUTATION } from "@/app/graphql/authOperations";
import { useAuthStore } from "@/app/lib/authStore";

interface SignUpData {
  signup: {
    access_token: string;
    user: {
      id: number;
      email: string;
      role: string;
    };
  };
}

interface ValidationErrorOriginalError {
  message?: string | string[];
}

interface GraphQLErrorExtensions {
  code?: string;
  originalError?: ValidationErrorOriginalError;
}

const Signup: React.FC = () => {
  const [email, setEmail] = useState<string>("");
  const [password, setPassword] = useState<string>("");
  const router = useRouter();
  const [errors, setErrors] = useState<{
    email?: string;
    password?: string;
    general?: string;
  }>({});
  const passwordRegex =
    /^(?=.*[A-Z])(?=.*[!@#$%^&*()_+{}\[\]:;<>,.?~\\/-]).{8,}$/;

  const setAuth = useAuthStore((state) => state.setAuth);

  const [signup, { loading }] = useMutation<SignUpData>(SIGNUP_MUTATION, {
    onCompleted: (data) => {
      if (data?.signup?.access_token && data?.signup?.user) {
        console.log("Signup successful. Redirecting to login...");
        setAuth(data.signup.access_token, data.signup.user);
        router.push("/timeKeeper");
      } else {
        console.error("Signup completed but response data is missing.", data);
        setErrors({
          general:
            "Signup process incomplete. Please try logging in or contact support.",
        });
      }
    },
    onError: (error) => {
      console.error("Error during signup:", error);

      if (error.message.includes("Email already exists")) {
        setErrors({
          ...errors,
          email: "Email already exists.",
        });
      } else if (
        error.graphQLErrors?.some(
          (e) => e.extensions?.code === "BAD_USER_INPUT"
        )
      ) {
        // Handle potential validation errors from backend ValidationPipe
        const validationError = error.graphQLErrors.find(
          (e) => e.extensions?.code === "BAD_USER_INPUT"
        );
        const extensions = validationError?.extensions as
          | GraphQLErrorExtensions
          | undefined;
        let extractedMessage: string | undefined = undefined;
        const originalMsg = extensions?.originalError?.message;

        if (Array.isArray(originalMsg)) {
          extractedMessage = originalMsg.join(", ");
        } else if (typeof originalMsg === "string") {
          extractedMessage = originalMsg;
        }
        setErrors({
          general: `Signup failed: ${extractedMessage || "Invalid input."}`,
        });
      } else {
        setErrors({
          ...errors,
          general: error.message || "An error occurred during signup.",
        });
      }
    },
    context: {
      credentials: "include",
    },
  });

  const validateForm = () => {
    let valid = true;
    const newErrors: { email?: string; password?: string } = {};

    const emailRegex = /\S+@\S+\.\S+/;
    if (!email || !emailRegex.test(email)) {
      newErrors.email = "Please provide a valid email address.";
      valid = false;
    }

    if (!password || !passwordRegex.test(password)) {
      newErrors.password =
        "Password must be at least 8 characters long, have at least one uppercase letter, and one special character.";
      valid = false;
    }

    setErrors(newErrors);
    return valid;
  };

  const handleSignup = async (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    setErrors({});

    if (!validateForm()) {
      return;
    }

    signup({
      variables: {
        input: {
          email,
          password,
        },
      },
      context: {
        credentials: "include",
      },
    });
  };

  return (
    <div className="flex items-center justify-center h-screen bg-gray-100">
      <div className="p-8 bg-white rounded shadow-md w-96">
        <h2 className="text-center text-2xl font-bold mb-4">
          Create an Account
        </h2>
        <form onSubmit={handleSignup}>
          <input
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            placeholder="Email"
            className="mb-2 p-2 w-full border rounded focus:outline-none focus:ring-2 focus:ring-blue-400"
          />
          {errors.email && (
            <p className="text-red-500 text-sm">{errors.email}</p>
          )}
          <input
            type="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            placeholder="Password"
            className="mb-2 p-2 w-full border rounded focus:outline-none focus:ring-2 focus:ring-blue-400"
          />
          {errors.password && (
            <p className="text-red-500 text-sm">{errors.password}</p>
          )}
          <button
            type="submit"
            disabled={loading}
            className="w-full bg-black text-white p-2 rounded focus:outline-none hover:bg-gray-700 mb-4 disabled:bg-gray-400"
          >
            {loading ? "CREATING ACCOUNT..." : "GET STARTED"}
          </button>
          {errors.general && (
            <p className="text-red-500 text-sm mb-4">{errors.general}</p>
          )}
        </form>
        <div className="flex justify-center">
          <span>
            Already have an account?{" "}
            <Link href="/login" className="text-blue-500">
              LOGIN HERE
            </Link>
          </span>
        </div>
        <div className="flex justify-end items-end mt-20">
          <Image
            src="/logo.svg"
            alt="Enablment-tt Logo"
            width={150}
            height={40}
          />
        </div>
      </div>
    </div>
  );
};

export default Signup;

// ====== FILE: src\app\timeKeeper\page.tsx ======

"use client";

import React, { useEffect, useState, useCallback } from "react";
import { useTimer } from "@/app/hooks/useTimer";
import { useAuthStore } from "@/app/lib/authStore";
import useCurrentUser from "@/app/hooks/useCurrentUser";
import { useFeedbackState } from "@/app/hooks/useFeedbackState";
import { useTimeKeeperQueries } from "@/app/hooks/useTimekeeperQueries";
import { useTimeKeeperHandlers } from "@/app/hooks/useTimekeeperHandlers";
import useTimeKeeperData from "@/app/hooks/useTimeKeeperData";
import NavigationBar from "@/app/components/NavigationBar";
import TimerDisplay from "@/app/components/TimerDisplay";
import TimerControls from "@/app/components/TimerControls";
import ProjectRateSelectors from "@/app/components/ProjectRateSelectors";
import { useTimerStore } from "@/app/lib/timerStore";
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
} from "@/components/ui/card";

const TimeKeeper: React.FC = () => {
  const [uiSelectedProject, setUiSelectedProject] = useState<string>("");
  const [uiSelectedRate, setUiSelectedRate] = useState<string>("");
  const loggedInUser = useAuthStore((state) => state.user);
  const userIdString = loggedInUser?.id?.toString() ?? "";
  const currentEntryId = useTimerStore((state) => state.currentEntryId);
  const activeTimerProjectId = useTimerStore(
    (state) => state.activeTimerProjectId
  );
  const activeTimerRateId = useTimerStore((state) => state.activeTimerRateId);
  const initialStartTimeISO = useTimerStore(
    (state) => state.initialStartTimeISO
  );
  const setCurrentEntryId = useTimerStore((state) => state.setCurrentEntryId);
  const timerState = useTimer(uiSelectedProject, uiSelectedRate);
  const { userProjects, currentTeamId } = useTimeKeeperData(uiSelectedProject);
  const feedbackState = useFeedbackState();

  useCurrentUser();

  const {
    ratesData,
    totalTimeData,
    totalTimeLoading,
    totalTimeError,
    refetch,
    createTimeEntry,
    updateTime,
  } = useTimeKeeperQueries(currentTeamId, uiSelectedProject, userIdString);

  const showSuccessToast = useCallback(
    () => toast.success("Time entry saved!"),
    []
  );
  const showErrorToast = useCallback(
    (message: string) => toast.error(message || "An error occurred."),
    []
  );
  const showResetToast = useCallback(() => toast.info("Timer reset!"), []);
  const showDateAlertToast = useCallback(
    (message: string) => toast.warn(message),
    []
  );

  useEffect(() => {
    if (feedbackState.state.submissionError) {
      showErrorToast(feedbackState.state.submissionError);
      feedbackState.actions.setSubmissionError("");
    }
  }, [
    feedbackState.state.submissionError,
    showErrorToast,
    feedbackState.actions,
  ]);

  const { handleDateChange, handleSubmit, handleReset } = useTimeKeeperHandlers(
    {
      timerState,
      timerProjectId: activeTimerProjectId ?? "",
      timerRateId: activeTimerRateId ?? "",
      userId: userIdString,
      createTimeEntry,
      updateTime,
      currentEntryId,
      setCurrentEntryId,
      showSuccessMessage: showSuccessToast,
      setSubmissionError: feedbackState.actions.setSubmissionError,
      showDateAlert: showDateAlertToast,
      showResetMessage: showResetToast,
    }
  );

  useEffect(() => {
    if (initialStartTimeISO) {
      setUiSelectedProject(activeTimerProjectId ?? "");
      setUiSelectedRate(activeTimerRateId ?? "");
    } else {
      setUiSelectedProject("");
      setUiSelectedRate("");
    }
  }, [activeTimerProjectId, activeTimerRateId, initialStartTimeISO]);

  useEffect(() => {
    if (uiSelectedProject && loggedInUser?.id) {
      refetch();
    }
  }, [uiSelectedProject, refetch, loggedInUser?.id]);

  const isStartPauseDisabled = !uiSelectedProject || !uiSelectedRate;
  const isResetDisabled = !timerState.initialStartTime;
  const isSubmitDisabled = timerState.isRunning || !timerState.initialStartTime;

  return (
    <>
      <NavigationBar />
      <ToastContainer
        position="top-right"
        autoClose={3000}
        hideProgressBar={false}
        newestOnTop={false}
        closeOnClick
        rtl={false}
        pauseOnFocusLoss
        draggable
        pauseOnHover
        theme="dark"
      />
      <div className="container mx-auto p-4 md:p-6 grid grid-cols-1 lg:grid-cols-3 gap-6 font-roboto-condensed">
        {/* Left Column (Timer Display & Controls) */}
        <div className="lg:col-span-2 flex flex-col gap-6">
          <Card>
            <CardHeader>
              <CardTitle>Time Tracker</CardTitle>
              <CardDescription>
                Start, pause, or submit your work time.
              </CardDescription>
            </CardHeader>
            <CardContent className="flex flex-col items-center justify-center gap-4 p-6">
              <TimerDisplay
                isRunning={timerState.isRunning}
                displayTime={timerState.displayTime}
                initialStartTime={timerState.initialStartTime}
                handleDateChange={handleDateChange}
              />
              <TimerControls
                isRunning={timerState.isRunning}
                handleStartStop={
                  timerState.isRunning ? timerState.pause : timerState.start
                }
                handleReset={handleReset}
                handleSubmit={handleSubmit}
                disabledStartPause={isStartPauseDisabled}
                disabledReset={isResetDisabled}
                disabledSubmit={isSubmitDisabled}
              />
            </CardContent>
          </Card>
        </div>

        {/* Right Column (Selectors & Info) */}
        <div className="lg:col-span-1 flex flex-col gap-6">
          <ProjectRateSelectors
            userProjects={userProjects.map((p) => ({
              ...p,
              teamName: p.teamName ?? "Unknown Team",
            }))}
            selectedProject={uiSelectedProject}
            setSelectedProject={setUiSelectedProject}
            rates={ratesData?.rates ?? []}
            selectedRate={uiSelectedRate}
            setSelectedRate={setUiSelectedRate}
            totalTimeLoading={totalTimeLoading}
            totalTimeError={totalTimeError}
            totalTime={totalTimeData?.getTotalTimeForUserProject ?? 0}
          />
        </div>
      </div>
    </>
  );
};

export default TimeKeeper;

// ====== FILE: src\app\utils\timeUtils.ts ======

// timeUtils.ts

export const formatDateForDisplay = (date: Date): string => {
  const options: Intl.DateTimeFormatOptions = {
    weekday: "long",
    year: "numeric",
    month: "long",
    day: "numeric",
  };
  return date.toLocaleDateString("en-US", options);
};

export const formatTimeFromISOString = (isoString: string): string => {
  const date = new Date(isoString);
  const hours = date.getHours();
  const minutes = date.getMinutes();
  const seconds = date.getSeconds();

  const formattedTime = `${hours}:${minutes < 10 ? `0${minutes}` : minutes}:${
    seconds < 10 ? `0${seconds}` : seconds
  }`;
  return formattedTime;
};

export const formatElapsedTime = (milliseconds: number): string => {
  let seconds = Math.floor(milliseconds / 1000);
  let minutes = Math.floor(seconds / 60);
  const hours = Math.floor(minutes / 60);

  seconds %= 60;
  minutes %= 60;

  const paddedHours = hours.toString().padStart(2, "0");
  const paddedMinutes = minutes.toString().padStart(2, "0");
  const paddedSeconds = seconds.toString().padStart(2, "0");

  return `${paddedHours}:${paddedMinutes}:${paddedSeconds}`;
};
export function formatTimeFromMilliseconds(ms: number): string {
  const totalSeconds = Math.floor(ms / 1000);
  const seconds = totalSeconds % 60;
  const minutes = Math.floor(totalSeconds / 60) % 60;
  const hours = Math.floor(totalSeconds / 3600);
  return `${hours.toString().padStart(2, "0")}:${minutes
    .toString()
    .padStart(2, "0")}:${seconds.toString().padStart(2, "0")}`;
}

// ====== FILE: src\components\ui\button.tsx ======

import * as React from "react";
import { Slot } from "@radix-ui/react-slot";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/app/lib/utils";

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow-xs hover:bg-primary/90",
        destructive:
          "bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50",
        secondary:
          "bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80",
        ghost:
          "hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2 has-[>svg]:px-3",
        sm: "h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5",
        lg: "h-10 rounded-md px-6 has-[>svg]:px-4",
        icon: "size-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
);

function Button({
  className,
  variant,
  size,
  asChild = false,
  ...props
}: React.ComponentProps<"button"> &
  VariantProps<typeof buttonVariants> & {
    asChild?: boolean;
  }) {
  const Comp = asChild ? Slot : "button";

  return (
    <Comp
      data-slot="button"
      className={cn(buttonVariants({ variant, size, className }))}
      {...props}
    />
  );
}

export { Button, buttonVariants };

// ====== FILE: src\components\ui\card.tsx ======

import * as React from "react";

import { cn } from "@/app/lib/utils";

function Card({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card"
      className={cn(
        "bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm",
        className
      )}
      {...props}
    />
  );
}

function CardHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-header"
      className={cn(
        "@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6",
        className
      )}
      {...props}
    />
  );
}

function CardTitle({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-title"
      className={cn("leading-none font-semibold", className)}
      {...props}
    />
  );
}

function CardDescription({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  );
}

function CardAction({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-action"
      className={cn(
        "col-start-2 row-span-2 row-start-1 self-start justify-self-end",
        className
      )}
      {...props}
    />
  );
}

function CardContent({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-content"
      className={cn("px-6", className)}
      {...props}
    />
  );
}

function CardFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-footer"
      className={cn("flex items-center px-6 [.border-t]:pt-6", className)}
      {...props}
    />
  );
}

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardAction,
  CardDescription,
  CardContent,
};

// ====== FILE: src\components\ui\label.tsx ======

"use client";

import * as React from "react";
import * as LabelPrimitive from "@radix-ui/react-label";

import { cn } from "@/app/lib/utils";

function Label({
  className,
  ...props
}: React.ComponentProps<typeof LabelPrimitive.Root>) {
  return (
    <LabelPrimitive.Root
      data-slot="label"
      className={cn(
        "flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50",
        className
      )}
      {...props}
    />
  );
}

export { Label };

// ====== FILE: src\components\ui\select.tsx ======

"use client";

import * as React from "react";
import * as SelectPrimitive from "@radix-ui/react-select";
import { CheckIcon, ChevronDownIcon, ChevronUpIcon } from "lucide-react";

import { cn } from "@/app/lib/utils";

function Select({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Root>) {
  return <SelectPrimitive.Root data-slot="select" {...props} />;
}

function SelectGroup({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Group>) {
  return <SelectPrimitive.Group data-slot="select-group" {...props} />;
}

function SelectValue({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Value>) {
  return <SelectPrimitive.Value data-slot="select-value" {...props} />;
}

function SelectTrigger({
  className,
  size = "default",
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Trigger> & {
  size?: "sm" | "default";
}) {
  return (
    <SelectPrimitive.Trigger
      data-slot="select-trigger"
      data-size={size}
      className={cn(
        "flex w-fit items-center justify-between gap-2 whitespace-nowrap rounded-md border border-input bg-background px-3 py-2 text-sm shadow-xs transition-[color,box-shadow] outline-none data-[placeholder]:text-muted-foreground focus-visible:ring-[3px] focus-visible:ring-ring/50 focus-visible:border-ring disabled:cursor-not-allowed disabled:opacity-50 [&_svg:not([class*='text-'])]:text-muted-foreground [&_svg:not([class*='size-'])]:size-4 [&_svg]:shrink-0 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 data-[size=default]:h-9 data-[size=sm]:h-8 aria-invalid:border-destructive aria-invalid:ring-destructive/20 dark:bg-input/30 dark:hover:bg-input/50 dark:aria-invalid:ring-destructive/40",
        className
      )}
      {...props}
    >
      {children}
      <SelectPrimitive.Icon asChild>
        <ChevronDownIcon className="size-4 opacity-50" />
      </SelectPrimitive.Icon>
    </SelectPrimitive.Trigger>
  );
}

function SelectContent({
  className,
  children,
  position = "popper",
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Content>) {
  return (
    <SelectPrimitive.Portal>
      <SelectPrimitive.Content
        data-slot="select-content"
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-(--radix-select-content-available-height) min-w-[8rem] origin-(--radix-select-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border shadow-md",
          position === "popper" &&
            "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
          className
        )}
        position={position}
        {...props}
      >
        <SelectScrollUpButton />
        <SelectPrimitive.Viewport
          className={cn(
            "p-1",
            position === "popper" &&
              "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1"
          )}
        >
          {children}
        </SelectPrimitive.Viewport>
        <SelectScrollDownButton />
      </SelectPrimitive.Content>
    </SelectPrimitive.Portal>
  );
}

function SelectLabel({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Label>) {
  return (
    <SelectPrimitive.Label
      data-slot="select-label"
      className={cn("text-muted-foreground px-2 py-1.5 text-xs", className)}
      {...props}
    />
  );
}

function SelectItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Item>) {
  return (
    <SelectPrimitive.Item
      data-slot="select-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2",
        className
      )}
      {...props}
    >
      <span className="absolute right-2 flex size-3.5 items-center justify-center">
        <SelectPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </SelectPrimitive.ItemIndicator>
      </span>
      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
    </SelectPrimitive.Item>
  );
}

function SelectSeparator({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Separator>) {
  return (
    <SelectPrimitive.Separator
      data-slot="select-separator"
      className={cn("bg-border pointer-events-none -mx-1 my-1 h-px", className)}
      {...props}
    />
  );
}

function SelectScrollUpButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {
  return (
    <SelectPrimitive.ScrollUpButton
      data-slot="select-scroll-up-button"
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className
      )}
      {...props}
    >
      <ChevronUpIcon className="size-4" />
    </SelectPrimitive.ScrollUpButton>
  );
}

function SelectScrollDownButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {
  return (
    <SelectPrimitive.ScrollDownButton
      data-slot="select-scroll-down-button"
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className
      )}
      {...props}
    >
      <ChevronDownIcon className="size-4" />
    </SelectPrimitive.ScrollDownButton>
  );
}

export {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectScrollDownButton,
  SelectScrollUpButton,
  SelectSeparator,
  SelectTrigger,
  SelectValue,
};

// ====== FILE: src\app\components\Admin\invoiceSummary.tsx ======

// src/app/components/Admin/invoiceSummary.tsx
"use client";

import React, { useState, useEffect, useMemo } from "react";
import { useQuery } from "@apollo/client";
import gql from "graphql-tag";
import ProjectSelector from "../ProjectSelector";

interface QueryRateDetail {
  rateId: number;
  rateName: string;
  hours: number;
  cost: number;
  ratePerHour: number;
  __typename?: string;
}

interface InvoiceData {
  projectId: string;
  projectName: string;
  teamId: string;
  teamName: string;
  totalHours: number;
  totalCost: number;
  rates: QueryRateDetail[];
  __typename?: string;
}

interface ProjectForSelector {
  id: string;
  name: string;
  teamName?: string;
}

interface RawProject {
  id: string;
  name: string;
  teamId: string;
  teamName?: string;
  __typename?: string;
}

interface GetProjectsData {
  projects: RawProject[];
}

interface GetInvoiceData {
  invoiceForProject: InvoiceData | null;
}

const GET_PROJECTS_FOR_SELECTOR = gql`
  query GetProjectsForInvoiceSelector {
    projects {
      id
      name
      teamName
      __typename
    }
  }
`;

const GET_INVOICE_FOR_PROJECT = gql`
  query InvoiceForProject($input: InvoiceInput!) {
    invoiceForProject(input: $input) {
      projectId
      projectName
      teamId
      teamName
      totalHours
      totalCost
      rates {
        rateId
        rateName
        hours
        cost
        ratePerHour
        __typename
      }
      __typename
    }
  }
`;

const InvoiceSummary: React.FC = () => {
  const [selectedProject, setSelectedProject] = useState<string>("");
  const [startDate, setStartDate] = useState<string>("");
  const [endDate, setEndDate] = useState<string>("");
  const [invoiceData, setInvoiceData] = useState<InvoiceData | null>(null);

  const {
    loading: projectsLoading,
    data: projectsData,
    error: projectsError,
  } = useQuery<GetProjectsData>(GET_PROJECTS_FOR_SELECTOR);

  const { loading: loadingInvoice, error: errorInvoice } =
    useQuery<GetInvoiceData>(GET_INVOICE_FOR_PROJECT, {
      variables: {
        input: {
          projectId: selectedProject,
          startDate: startDate ? new Date(startDate).toISOString() : null,
          endDate: endDate ? new Date(endDate).toISOString() : null,
        },
      },
      skip: !selectedProject || !startDate || !endDate,
      fetchPolicy: "network-only",
      notifyOnNetworkStatusChange: true,
      onCompleted: (data) => {
        setInvoiceData(data?.invoiceForProject ?? null);
      },
      onError: (error) => {
        console.error("Error fetching invoice:", error);
        setInvoiceData(null);
      },
    });

  const projectsForSelector = useMemo<ProjectForSelector[]>(() => {
    if (!projectsData?.projects) return [];
    return projectsData.projects.map((project) => ({
      id: project.id,
      name: project.name,
      teamName: project.teamName || "Unknown Team",
    }));
  }, [projectsData]);

  useEffect(() => {
    console.log("Invoice State Update:", {
      selectedProject,
      startDate,
      endDate,
      invoiceData,
      loadingInvoice,
      errorInvoice,
    });
  }, [
    selectedProject,
    startDate,
    endDate,
    invoiceData,
    loadingInvoice,
    errorInvoice,
  ]);

  const formatCurrency = (value: number | null | undefined): string => {
    if (
      value === null ||
      value === undefined ||
      typeof value !== "number" ||
      isNaN(value)
    )
      return "-";
    try {
      return new Intl.NumberFormat("da-DK", {
        style: "currency",
        currency: "DKK",
        minimumFractionDigits: 2,
        maximumFractionDigits: 2,
      }).format(value);
    } catch (e) {
      console.error("Error formatting currency:", e);
      return String(value);
    }
  };

  const isInitialLoading = projectsLoading;
  const initialLoadingError = projectsError;

  const renderInvoiceDetails = () => {
    if (loadingInvoice) {
      return <p className="text-gray-400 mt-4">Loading Invoice...</p>;
    }
    if (errorInvoice) {
      return (
        <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mt-4 rounded">
          <p className="font-bold">Error Loading Invoice</p>
          <p>{errorInvoice.message}</p>
        </div>
      );
    }
    if (invoiceData) {
      return (
        <div className="mt-4 p-6 bg-white shadow-md rounded-lg">
          <h4 className="text-md font-bold bg-slate-200 p-2 rounded-t-lg">
            Project: {invoiceData.projectName} - Team:{" "}
            {invoiceData.teamName ?? "N/A"}
          </h4>
          <div className="p-2 space-y-1">
            <p className="border-b border-gray-200 pb-1">
              Total Hours: {invoiceData.totalHours?.toFixed(2) ?? "N/A"}
            </p>
            <p className="border-b border-gray-200 pb-1">
              Total Cost: {formatCurrency(invoiceData.totalCost)}
            </p>
            <div className="mt-4">
              <h5 className="font-semibold bg-slate-200 p-1">Rates Applied:</h5>
              {invoiceData.rates && invoiceData.rates.length > 0 ? (
                <ul className="list-disc list-inside pl-4 pt-1">
                  {invoiceData.rates.map((rate: QueryRateDetail) => (
                    <li
                      className="border-b border-gray-100 py-1 text-sm"
                      key={rate.rateId}
                    >
                      {rate.rateName}: {rate.hours?.toFixed(2) ?? "N/A"} hours
                      at {formatCurrency(rate.cost)} (
                      {formatCurrency(rate.ratePerHour)} / h)
                    </li>
                  ))}
                </ul>
              ) : (
                <p className="text-gray-500 text-sm pt-1">
                  No specific rates applied for this period.
                </p>
              )}
            </div>
          </div>
        </div>
      );
    }
    if (selectedProject && startDate && endDate) {
      return (
        <p className="text-gray-400 mt-4">
          No invoice data found for the selected criteria.
        </p>
      );
    }
    return (
      <p className="text-gray-500 mt-4">
        Please select a project and date range.
      </p>
    );
  };

  return (
    <div className="p-6 bg-black shadow-md rounded-lg">
      <div className="flex flex-col md:flex-row justify-between items-center space-y-4 md:space-y-0 md:space-x-4 mb-4">
        <h3 className="text-lg font-bold text-white">Invoice Summary</h3>
        <div className="flex-grow">
          {isInitialLoading && (
            <select
              className="w-full p-2 bg-gray-200 border border-gray-300 rounded-md text-gray-500 cursor-not-allowed"
              disabled
            >
              <option>Loading Projects...</option>
            </select>
          )}
          {initialLoadingError && (
            <div className="p-2 bg-red-100 text-red-700 border border-red-300 rounded">
              Error loading projects/teams.
            </div>
          )}
          {!isInitialLoading && !initialLoadingError && (
            <ProjectSelector
              projects={projectsForSelector}
              selectedProject={selectedProject}
              onProjectChange={setSelectedProject}
            />
          )}
        </div>
        <div className="flex-grow flex flex-col md:flex-row gap-2 md:gap-4">
          <input
            type="date"
            value={startDate}
            onChange={(e) => setStartDate(e.target.value)}
            className="w-full p-2 bg-white text-black border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
            aria-label="Start Date"
            disabled={isInitialLoading}
          />
          <input
            type="date"
            value={endDate}
            onChange={(e) => setEndDate(e.target.value)}
            className="w-full p-2 bg-white text-black border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
            aria-label="End Date"
            disabled={isInitialLoading}
            min={startDate}
          />
        </div>
      </div>
      {!isInitialLoading && !initialLoadingError ? (
        renderInvoiceDetails()
      ) : (
        <p className="text-gray-500 mt-4 italic">Loading initial data...</p>
      )}
    </div>
  );
};

export default InvoiceSummary;

// ====== FILE: src\app\components\Admin\ratesManager.tsx ======

"use client";

import React, { useState, useCallback } from "react";
import { useQuery, useMutation, gql } from "@apollo/client";
import { toast } from "react-toastify";

interface Team {
  id: string;
  name: string;
  __typename?: "SimpleTeamDTO";
}

interface Rate {
  id: number;
  name: string;
  rate: number;
  teamId?: string;
  __typename?: "Rate";
}

interface GetRatesQueryData {
  rates: Rate[];
}

interface GetAllTeamsQueryData {
  getAllSimpleTeams: Team[];
}

const GET_ALL_SIMPLE_TEAMS = gql`
  query GetAllSimpleTeams_RatesManager {
    getAllSimpleTeams {
      id
      name
      __typename
    }
  }
`;

const CREATE_RATE = gql`
  mutation CreateRate_RatesManager(
    $name: String!
    $rate: Int!
    $teamId: String!
  ) {
    createRate(rateInputCreate: { name: $name, rate: $rate, teamId: $teamId }) {
      id
      name
      rate
      teamId
      __typename
    }
  }
`;

const DELETE_RATE = gql`
  mutation DeleteRate_RatesManager($rateId: Int!) {
    deleteRate(rateId: $rateId) {
      id
    }
  }
`;

const GET_RATES = gql`
  query GetRates_RatesManager($teamId: String!) {
    rates(teamId: $teamId) {
      id
      name
      rate
      __typename
    }
  }
`;

const RatesManager = () => {
  const [selectedTeamId, setSelectedTeamId] = useState("");
  const [rateName, setRateName] = useState("");
  const [rateValue, setRateValue] = useState<number | string>("");
  const [formError, setFormError] = useState<string | null>(null);
  const [processingDeleteId, setProcessingDeleteId] = useState<number | null>(
    null
  );

  const {
    loading: teamsLoading,
    error: teamsError,
    data: teamsData,
  } = useQuery<GetAllTeamsQueryData>(GET_ALL_SIMPLE_TEAMS);

  const {
    loading: ratesLoading,
    error: ratesError,
    data: ratesData,
  } = useQuery<GetRatesQueryData>(GET_RATES, {
    variables: { teamId: selectedTeamId },
    skip: !selectedTeamId,
    fetchPolicy: "cache-and-network",
  });

  const [createRateMutation, { loading: creatingRate }] = useMutation(
    CREATE_RATE,
    {
      update(cache, { data: { createRate: newRate } }) {
        if (!newRate || !selectedTeamId) return;
        const existingRates = cache.readQuery<GetRatesQueryData>({
          query: GET_RATES,
          variables: { teamId: selectedTeamId },
        });
        if (existingRates && existingRates.rates) {
          cache.writeQuery({
            query: GET_RATES,
            variables: { teamId: selectedTeamId },
            data: { rates: [...existingRates.rates, newRate] },
          });
        }
      },
      onError: (error) => {
        console.error("Error creating rate:", error);
        toast.error(`Failed to create rate: ${error.message}`);
      },
      onCompleted: () => {
        toast.success("Rate created successfully!");
        setRateName("");
        setRateValue("");
        setFormError(null);
      },
    }
  );

  const [deleteRateMutation] = useMutation(DELETE_RATE, {
    update(cache, { data: { deleteRate: deletedRateData } }) {
      if (!deletedRateData || !selectedTeamId) return;
      const deletedId = deletedRateData.id;
      const existingRates = cache.readQuery<GetRatesQueryData>({
        query: GET_RATES,
        variables: { teamId: selectedTeamId },
      });
      if (existingRates && existingRates.rates) {
        const updatedRates = existingRates.rates.filter(
          (rate) => rate.id !== deletedId
        );
        cache.writeQuery({
          query: GET_RATES,
          variables: { teamId: selectedTeamId },
          data: { rates: updatedRates },
        });
      }
    },
    onError: (error) => {
      console.error("Error deleting rate:", error);
      toast.error(`Failed to delete rate: ${error.message}`);
      setProcessingDeleteId(null);
    },
    onCompleted: (data) => {
      if (data?.deleteRate?.id) {
        toast.success(`Rate deleted successfully!`);
      }
      setProcessingDeleteId(null);
    },
  });

  const handleRateValueChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    setRateValue(value === "" ? "" : parseInt(value, 10) || 0);
    if (value !== "" && isNaN(parseInt(value, 10))) {
      setFormError("Rate value must be a number.");
    } else {
      setFormError(null);
    }
  };

  const handleCreateRate = useCallback(() => {
    setFormError(null);
    if (!selectedTeamId) {
      setFormError("Please select a team.");
      return;
    }
    if (!rateName.trim()) {
      setFormError("Please enter a rate name.");
      return;
    }
    if (rateValue === "" || isNaN(Number(rateValue)) || Number(rateValue) < 0) {
      setFormError("Please enter a valid non-negative rate value.");
      return;
    }
    if (formError) return;

    createRateMutation({
      variables: {
        name: rateName.trim(),
        rate: Number(rateValue),
        teamId: selectedTeamId,
      },
    });
  }, [createRateMutation, rateName, rateValue, selectedTeamId, formError]);

  const handleDeleteRate = useCallback(
    (rateId: number) => {
      if (processingDeleteId) return;
      setProcessingDeleteId(rateId);
      deleteRateMutation({ variables: { rateId } });
    },
    [deleteRateMutation, processingDeleteId]
  );

  const isActionLoading = creatingRate || processingDeleteId !== null;

  return (
    <div className="p-4 bg-gray-50 shadow-md rounded-lg border">
      <h3 className="font-bold text-lg mb-4 border-b pb-2">Manage Rates</h3>
      <div className="mb-4">
        <label
          htmlFor="teamSelectorRates"
          className="block text-sm font-medium text-gray-700 mb-1"
        >
          Select Team
        </label>
        <select
          id="teamSelectorRates"
          className="w-full p-2 border border-gray-300 rounded shadow-sm focus:ring-indigo-500 focus:border-indigo-500 disabled:bg-gray-100"
          onChange={(e) => setSelectedTeamId(e.target.value)}
          value={selectedTeamId}
          disabled={teamsLoading}
        >
          <option value="">
            {teamsLoading ? "Loading Teams..." : "-- Select a Team --"}
          </option>
          {teamsData?.getAllSimpleTeams.map((team: Team) => (
            <option key={team.id} value={team.id}>
              {team.name}
            </option>
          ))}
        </select>
        {teamsError && (
          <p className="text-red-500 text-xs mt-1">{teamsError.message}</p>
        )}
      </div>

      {selectedTeamId && (
        <div className="mb-4 p-4 border rounded-md bg-white grid grid-cols-1 md:grid-cols-4 gap-4 items-end">
          <div className="md:col-span-2">
            <label
              htmlFor="rateName"
              className="block text-sm font-medium text-gray-700"
            >
              New Rate Name
            </label>
            <input
              type="text"
              id="rateName"
              className="w-full p-2 mt-1 border border-gray-300 rounded disabled:bg-gray-100"
              value={rateName}
              onChange={(e) => setRateName(e.target.value)}
              placeholder="e.g., Standard Rate"
              disabled={isActionLoading}
            />
          </div>
          <div>
            <label
              htmlFor="rateValue"
              className="block text-sm font-medium text-gray-700"
            >
              Rate Value (DKK)
            </label>
            <input
              type="number"
              id="rateValue"
              className="w-full p-2 mt-1 border border-gray-300 rounded disabled:bg-gray-100"
              value={rateValue}
              onChange={handleRateValueChange}
              placeholder="e.g., 800"
              min="0"
              step="1"
              disabled={isActionLoading}
            />
          </div>
          <div>
            <button
              className="w-full p-2 bg-black text-white rounded hover:bg-gray-700 font-medium disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2"
              onClick={handleCreateRate}
              disabled={isActionLoading || !!formError}
            >
              {creatingRate ? (
                <>
                  <svg
                    className="animate-spin h-4 w-4 text-white"
                    fill="none"
                    viewBox="0 0 24 24"
                  >
                    {" "}
                    <circle
                      className="opacity-25"
                      cx="12"
                      cy="12"
                      r="10"
                      stroke="currentColor"
                      strokeWidth="4"
                    ></circle>{" "}
                    <path
                      className="opacity-75"
                      fill="currentColor"
                      d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                    ></path>{" "}
                  </svg>
                  Creating...
                </>
              ) : (
                "Create Rate"
              )}
            </button>
            {formError && (
              <p className="text-red-500 text-xs mt-1">{formError}</p>
            )}
          </div>
        </div>
      )}

      <div className="mt-4">
        <h4 className="font-semibold mb-2">Existing Rates for Team:</h4>
        {selectedTeamId ? (
          <>
            {ratesLoading && (
              <p className="text-gray-500 italic">Loading rates...</p>
            )}
            {ratesError && (
              <p className="text-red-500">
                Error loading rates: {ratesError.message}
              </p>
            )}
            {!ratesLoading &&
              !ratesError &&
              ratesData?.rates &&
              ratesData.rates.length === 0 && (
                <p className="text-gray-500 italic">
                  No rates defined for this team yet.
                </p>
              )}
            {!ratesLoading &&
              !ratesError &&
              ratesData?.rates &&
              ratesData.rates.length > 0 && (
                <div className="border rounded-md max-h-60 overflow-y-auto bg-white">
                  <ul className="divide-y divide-gray-200">
                    {ratesData.rates.map((rate: Rate) => {
                      const isDeletingThisRate = processingDeleteId === rate.id;
                      return (
                        <li
                          key={rate.id}
                          className="flex justify-between items-center p-3 hover:bg-gray-50"
                        >
                          <div>
                            <span className="font-medium mr-2">
                              {rate.name}
                            </span>
                            <span className="text-gray-600">
                              ({rate.rate} DKK/h)
                            </span>
                          </div>
                          <button
                            className={`p-1 px-2 bg-red-600 text-white text-xs rounded hover:bg-red-700 disabled:opacity-50 flex items-center gap-1`}
                            onClick={() => handleDeleteRate(rate.id)}
                            disabled={isActionLoading || isDeletingThisRate}
                          >
                            {isDeletingThisRate ? (
                              <svg
                                className="animate-spin h-3 w-3 text-white"
                                fill="none"
                                viewBox="0 0 24 24"
                              >
                                {" "}
                                <circle
                                  className="opacity-25"
                                  cx="12"
                                  cy="12"
                                  r="10"
                                  stroke="currentColor"
                                  strokeWidth="4"
                                ></circle>{" "}
                                <path
                                  className="opacity-75"
                                  fill="currentColor"
                                  d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                                ></path>{" "}
                              </svg>
                            ) : (
                              <svg
                                xmlns="http://www.w3.org/2000/svg"
                                className="h-3 w-3"
                                fill="none"
                                viewBox="0 0 24 24"
                                stroke="currentColor"
                                strokeWidth={2}
                              >
                                {" "}
                                <path
                                  strokeLinecap="round"
                                  strokeLinejoin="round"
                                  d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"
                                />{" "}
                              </svg>
                            )}
                            {isDeletingThisRate ? "Deleting..." : "Delete"}
                          </button>
                        </li>
                      );
                    })}
                  </ul>
                </div>
              )}
          </>
        ) : (
          <p className="text-gray-500 italic">
            Select a team to view and manage rates.
          </p>
        )}
      </div>
    </div>
  );
};

export default RatesManager;

// ====== FILE: src\app\components\Admin\totalTimeSpent.tsx ======

"use client";

import React, { useState, useEffect } from "react";
import { useQuery, gql } from "@apollo/client";
import { useAuthStore } from "@/app/lib/authStore";
import { formatTimeFromMilliseconds } from "@/app/utils/timeUtils";
import { useReactiveVar } from "@apollo/client";
import { loggedInUserTeamsVersion } from "@/app/lib/apolloClient";

interface MyProject {
  id: string;
  name: string;
  teamName?: string;
  teamId: string;
  __typename?: "Project";
}

interface GetMyProjectsQueryData {
  myProjects: MyProject[];
}

interface GetTotalTimeSpentQueryData {
  getTotalTimeSpent: number | null;
}

const GET_TOTAL_TIME_SPENT = gql`
  query GetTotalTimeSpent(
    $userId: Float!
    $projectId: String!
    $startDate: String!
    $endDate: String!
  ) {
    getTotalTimeSpent(
      userId: $userId
      projectId: $projectId
      startDate: $startDate
      endDate: $endDate
    )
  }
`;

export const GET_MY_PROJECTS = gql`
  query GetMyProjects {
    myProjects {
      id
      name
      teamId
      teamName
      __typename
    }
  }
`;

const getCurrentDate = () => new Date().toISOString().split("T")[0];

const TotalTimeSpent: React.FC = () => {
  const [totalTime, setTotalTime] = useState<number | null>(null);
  const [selectedProject, setSelectedProject] = useState<string>("");
  const [startDate, setStartDate] = useState(getCurrentDate());
  const [endDate, setEndDate] = useState(getCurrentDate());

  const [userProjects, setUserProjects] = useState<MyProject[]>([]);
  const [errorMessage, setErrorMessage] = useState<string | null>(null);

  const loggedInUser = useAuthStore((state) => state.user);
  const loggedInUserId = loggedInUser?.id;
  const teamsVersion = useReactiveVar(loggedInUserTeamsVersion);

  const {
    loading: loadingUserProjects,
    error: errorUserProjects,
    refetch: refetchMyProjects,
  } = useQuery<GetMyProjectsQueryData>(GET_MY_PROJECTS, {
    skip: !loggedInUserId,
    fetchPolicy: "cache-and-network",
    onCompleted: (data) => {
      if (data?.myProjects) {
        const currentProjects = data.myProjects;
        setUserProjects(currentProjects);
        const selectedExists = currentProjects.some(
          (p) => p.id === selectedProject
        );
        if (!selectedExists && currentProjects.length > 0) {
          setSelectedProject(currentProjects[0].id);
        } else if (!selectedExists && currentProjects.length === 0) {
          setSelectedProject("");
        }
      } else {
        setUserProjects([]);
        setSelectedProject("");
      }
    },
    onError: (error) => {
      console.error("Error fetching my projects:", error);
      setErrorMessage("Could not load your projects.");
    },
  });

  const {
    loading: loadingTime,
    error: errorTime,
    data: timeData,
    refetch: refetchTotalTime,
  } = useQuery<GetTotalTimeSpentQueryData>(GET_TOTAL_TIME_SPENT, {
    variables: {
      userId: loggedInUserId,
      projectId: selectedProject,
      startDate: startDate,
      endDate: endDate,
    },
    skip: !loggedInUserId || !selectedProject || !startDate || !endDate,
    fetchPolicy: "cache-first",
    notifyOnNetworkStatusChange: true,
    onError: (error) => {
      console.error("Error fetching total time:", error);
      setErrorMessage("Could not calculate total time for the selection.");
      setTotalTime(null);
    },
  });

  useEffect(() => {
    if (loggedInUserId) {
      console.log(
        `Teams version changed to ${teamsVersion}, refetching my projects.`
      );
      refetchMyProjects().catch((err) => {
        console.error("Failed to refetch my projects on version change:", err);
        setErrorMessage("Failed to update project list.");
      });
    }
  }, [teamsVersion, loggedInUserId, refetchMyProjects]);

  useEffect(() => {
    if (loggedInUserId && selectedProject && startDate && endDate) {
      console.log("Inputs changed, refetching total time...");
      refetchTotalTime({
        userId: loggedInUserId,
        projectId: selectedProject,
        startDate: startDate,
        endDate: endDate,
      }).catch((err) => {
        console.error("Manual refetch failed:", err);
        setErrorMessage("Failed to refresh total time.");
      });
    } else if (!selectedProject) {
      setTotalTime(null);
    }
  }, [loggedInUserId, selectedProject, startDate, endDate, refetchTotalTime]);

  useEffect(() => {
    if (timeData) {
      setTotalTime(timeData.getTotalTimeSpent ?? 0);
      if (!errorTime) setErrorMessage(null);
    }
    if (timeData && timeData.getTotalTimeSpent === null) {
      setTotalTime(0);
    }
  }, [timeData, errorTime]);

  const isLoading = loadingUserProjects || loadingTime;
  const displayError =
    errorMessage || errorUserProjects?.message || errorTime?.message;

  return (
    <div className="p-6 bg-black shadow-md flex flex-col md:flex-row justify-between items-center space-y-4 md:space-y-0 md:space-x-6">
      <h3 className="text-lg font-bold text-white whitespace-nowrap">
        Time Spent Analysis (My Projects)
      </h3>

      {/* Project Selector */}
      <div className="flex-grow w-full md:w-auto">
        <select
          id="myProjectSelectorForTime"
          value={selectedProject}
          onChange={(e) => setSelectedProject(e.target.value)}
          className="w-full p-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
          disabled={loadingUserProjects || userProjects.length === 0}
        >
          <option value="">
            {loadingUserProjects
              ? "Loading My Projects..."
              : userProjects.length === 0
              ? "No Projects Found"
              : "Select My Project"}
          </option>
          {userProjects.map((project) => (
            <option key={project.id} value={project.id}>
              {project.name} {project.teamName ? `(${project.teamName})` : ""}
            </option>
          ))}
        </select>
      </div>

      {/* Date Pickers */}
      <div className="flex-grow w-full md:w-auto flex flex-col sm:flex-row gap-2">
        <input
          type="date"
          id="startDatePicker"
          value={startDate}
          onChange={(e) => setStartDate(e.target.value)}
          className="w-full p-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
          aria-label="Start Date"
        />
        <input
          type="date"
          id="endDatePicker"
          value={endDate}
          onChange={(e) => setEndDate(e.target.value)}
          className="w-full p-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
          aria-label="End Date"
        />
      </div>

      {/* Total Time Display */}
      <div className="text-center md:text-right whitespace-nowrap">
        {isLoading && !displayError && (
          <p className="text-gray-400">Loading Time...</p>
        )}
        {displayError && <p className="text-red-400 text-sm">{displayError}</p>}
        {!isLoading && !displayError && (
          <p className="text-lg font-medium text-white">
            Total:{" "}
            {totalTime !== null ? formatTimeFromMilliseconds(totalTime) : "N/A"}
          </p>
        )}
      </div>
    </div>
  );
};

export default TotalTimeSpent;

// ====== FILE: src\app\components\Admin\userManagementSection.tsx ======

"use client";

import React, { useEffect, useState } from "react";
import { useQuery, gql, NetworkStatus, ApolloError } from "@apollo/client";
import { useDebounce } from "use-debounce";
import UserTable from "@/app/components/Admin/UserTable";
import { User as UserTableRowType } from "@/app/components/Admin/UserRow";
import { UserRole } from "@/app/components/Admin/UserRoleSelect";
import { GET_SIMPLE_TEAMS } from "@/app/graphql/adminOperations";
import { useAuthStore } from "@/app/lib/authStore";

const GET_MANAGEMENT_USERS = gql`
  query GetManagementUsers(
    $page: Int
    $pageSize: Int
    $search: String
    $role: UserRole
  ) {
    users(
      args: { page: $page, pageSize: $pageSize, search: $search, role: $role }
    ) {
      id
      email
      role
      teams {
        id
        name
        __typename
      }
      __typename
    }
  }
`;

const GET_USERS_COUNT = gql`
  query GetUsersManagementCount($search: String, $role: UserRole) {
    usersCount(search: $search, role: $role)
  }
`;

interface GetUsersQueryData {
  users: Array<{
    id: number;
    email: string;
    role: string;
    teams: Array<{ id: string; name: string; __typename: "Team" }>;
    __typename: "User";
  }>;
}

interface GetSimpleTeamsQueryData {
  getAllSimpleTeams: Array<{
    id: string;
    name: string;
    __typename: "SimpleTeamDTO";
  }>;
}

interface GetUsersCountQueryData {
  usersCount: number;
}

const UserManagementSection: React.FC = () => {
  const [page, setPage] = useState(1);
  const [pageSize, setPageSize] = useState(10);
  const [searchTerm, setSearchTerm] = useState("");
  const [roleFilter, setRoleFilter] = useState<UserRole | "">("");

  const [debouncedSearchTerm] = useDebounce(searchTerm, 500);

  const [users, setUsers] = useState<GetUsersQueryData["users"]>([]);
  const loggedInUser = useAuthStore((state) => state.user);

  const userQueryVariables = {
    page: page || null,
    pageSize: pageSize || null,
    search: debouncedSearchTerm || null,
    role: roleFilter || null,
  };

  const countQueryVariables = {
    search: debouncedSearchTerm || undefined,
    role: roleFilter || undefined,
  };

  const {
    loading: loadingUsers,
    error: errorUsers,
    data: dataUsers,
    networkStatus,
  } = useQuery<GetUsersQueryData>(GET_MANAGEMENT_USERS, {
    variables: userQueryVariables,
    notifyOnNetworkStatusChange: true,
    fetchPolicy: "cache-and-network",
  });

  const { data: countData, error: countError } =
    useQuery<GetUsersCountQueryData>(GET_USERS_COUNT, {
      variables: countQueryVariables,
      fetchPolicy: "cache-and-network",
    });

  const {
    loading: loadingTeams,
    data: dataTeams,
    error: teamsError,
  } = useQuery<GetSimpleTeamsQueryData>(GET_SIMPLE_TEAMS);

  const totalUsers = countData?.usersCount ?? 0;
  const totalPages = Math.ceil(totalUsers / pageSize);

  useEffect(() => {
    if (dataUsers?.users) {
      setUsers(dataUsers.users);
    }
  }, [dataUsers]);

  useEffect(() => {
    setPage(1);
  }, [debouncedSearchTerm, roleFilter, pageSize]);

  const isLoading =
    loadingUsers &&
    networkStatus !== NetworkStatus.refetch &&
    networkStatus !== NetworkStatus.setVariables;
  const isRefetching =
    networkStatus === NetworkStatus.refetch ||
    networkStatus === NetworkStatus.setVariables;
  const combinedError = errorUsers || countError || teamsError;

  if (isLoading || loadingTeams) return <p>Loading User Data...</p>;

  if (combinedError) {
    const error = combinedError as ApolloError;
    console.error("Data loading error:", error);
    const graphQLError = error.graphQLErrors?.[0];
    if (graphQLError?.extensions?.code === "FORBIDDEN") {
      return <p>You do not have permission to view users.</p>;
    }
    return <p>Error loading data: {error.message}</p>;
  }

  const usersForTable: UserTableRowType[] = users.map((user) => ({
    ...user,
    role: user.role as UserRole,
  }));

  return (
    <div className="mb-6 shadow-md p-4 border rounded-lg bg-white">
      {" "}
      <h2 className="text-xl font-semibold mb-4">User Management</h2>{" "}
      <div className="mb-4 flex flex-col sm:flex-row flex-wrap gap-2 sm:gap-4 items-center">
        <div className="flex-grow w-full sm:w-auto">
          <label htmlFor="userSearch" className="sr-only">
            Search by email
          </label>
          <input
            id="userSearch"
            type="text"
            placeholder="Search by email..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="w-full p-2 border rounded text-sm focus:ring-indigo-500 focus:border-indigo-500"
          />
        </div>
        <div className="w-full sm:w-auto">
          <label htmlFor="roleFilter" className="sr-only">
            Filter by role
          </label>
          <select
            id="roleFilter"
            value={roleFilter}
            onChange={(e) => setRoleFilter(e.target.value as UserRole | "")}
            className="w-full p-2 border rounded text-sm focus:ring-indigo-500 focus:border-indigo-500"
          >
            <option value="">All Roles</option>
            {Object.values(UserRole).map((role) => (
              <option key={role} value={role}>
                {role}
              </option>
            ))}
          </select>
        </div>
        <div className="text-sm text-gray-700 w-full sm:w-auto sm:ml-auto">
          <label htmlFor="pageSizeSelect" className="mr-1">
            Show:
          </label>
          <select
            id="pageSizeSelect"
            value={pageSize}
            onChange={(e) => setPageSize(Number(e.target.value))}
            className="border rounded px-2 py-1 mx-1 focus:ring-indigo-500 focus:border-indigo-500"
          >
            <option value="5">5</option>
            <option value="10">10</option>
            <option value="25">25</option>
            <option value="50">50</option>
          </select>
          <span>entries</span>
        </div>
      </div>
      {!isLoading && !combinedError && (
        <>
          <div
            className={`transition-opacity duration-300 ${
              isRefetching ? "opacity-50 pointer-events-none" : "opacity-100"
            }`}
          >
            <UserTable
              users={usersForTable}
              allTeams={dataTeams?.getAllSimpleTeams || []}
              loggedInUserId={loggedInUser?.id}
            />
          </div>

          <div className="flex flex-col sm:flex-row justify-between items-center mt-4 text-sm text-gray-700">
            <div className="mb-2 sm:mb-0">
              Showing{" "}
              {Math.min(
                totalUsers > 0 ? (page - 1) * pageSize + 1 : 0,
                totalUsers
              )}{" "}
              to {Math.min(page * pageSize, totalUsers)} of {totalUsers} entries
            </div>
            <div className="flex items-center">
              <button
                onClick={() => setPage((p) => Math.max(1, p - 1))}
                disabled={page === 1 || isRefetching}
                className="px-3 py-1 border rounded mr-2 disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-100 transition-colors"
                aria-label="Previous Page"
              >
                {" "}
                Previous{" "}
              </button>
              <span className="mx-2 font-medium">
                Page {page} of {totalPages > 0 ? totalPages : 1}
              </span>
              <button
                onClick={() => setPage((p) => Math.min(totalPages, p + 1))}
                disabled={
                  page === totalPages || totalPages === 0 || isRefetching
                }
                className="px-3 py-1 border rounded ml-2 disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-100 transition-colors"
                aria-label="Next Page"
              >
                {" "}
                Next{" "}
              </button>
            </div>
          </div>
        </>
      )}
      {isRefetching && !isLoading && (
        <p className="text-center text-gray-500 mt-4">Updating list...</p>
      )}
    </div>
  );
};

export default UserManagementSection;

// ====== FILE: src\app\components\Admin\UserRoleSelect.tsx ======

"use client";
import React from "react";

export enum UserRole {
  ADMIN = "ADMIN",
  ENABLER = "ENABLER",
  COLLABORATOR = "COLLABORATOR",
  PENDING = "PENDING",
}

interface UserRoleSelectProps {
  currentRole: UserRole;
  onRoleChange: (newRole: UserRole) => void;
}

const UserRoleSelect: React.FC<UserRoleSelectProps> = ({
  currentRole,
  onRoleChange,
}) => {
  return (
    <select
      value={currentRole}
      onChange={(e) => onRoleChange(e.target.value as UserRole)}
    >
      {Object.values(UserRole).map((role) => (
        <option key={role} value={role}>
          {role}
        </option>
      ))}
    </select>
  );
};

export default UserRoleSelect;

// ====== FILE: src\app\components\Admin\UserRow.tsx ======

"use client";

import React, { useState, useCallback } from "react";
import { useMutation, useApolloClient, gql, ApolloError } from "@apollo/client";
import { toast } from "react-toastify";
import {
  ADD_USER_TO_TEAM,
  REMOVE_USER_FROM_TEAM,
  UPDATE_USER_ROLE,
} from "@/app/graphql/adminOperations";
import { loggedInUserTeamsVersion } from "@/app/lib/apolloClient";
import UserRoleSelect, { UserRole } from "./UserRoleSelect";

export interface Team {
  id: string;
  name: string;
  __typename?: "Team" | "SimpleTeamDTO";
}

export interface User {
  id: number;
  email: string;
  role: UserRole;
  teams: Team[];
  __typename?: "User";
}

interface UserRowProps {
  user: User;
  allTeams: Team[];
  loggedInUserId: number | undefined;
}

const UserRow: React.FC<UserRowProps> = ({
  user,
  allTeams,
  loggedInUserId,
}) => {
  const [selectedTeamIdForRow, setSelectedTeamIdForRow] = useState<string>("");
  const [isAdding, setIsAdding] = useState(false);
  const [confirmingRemoveTeamId, setConfirmingRemoveTeamId] = useState<
    string | null
  >(null);
  const [isProcessingRemove, setIsProcessingRemove] = useState<string | null>(
    null
  );
  const [isChangingRole, setIsChangingRole] = useState(false);
  const [rowError, setRowError] = useState<string | null>(null);

  const client = useApolloClient();

  const [addUserToTeamMutation] = useMutation(ADD_USER_TO_TEAM, {
    onError: (error) => {
      console.error("Error adding user to team:", error);
      const errorMsg = error.message || "Failed to add user to team.";
      setRowError(errorMsg);
      toast.error(`Error: ${errorMsg}`);
      setIsAdding(false);
    },
  });
  const [removeUserFromTeamMutation] = useMutation(REMOVE_USER_FROM_TEAM, {
    onError: (error) => {
      console.error("Error removing user from team:", error);
      const errorMsg = error.message || "Failed to remove user from team.";
      setRowError(errorMsg);
      toast.error(`Error: ${errorMsg}`);
      setIsProcessingRemove(null);
      setConfirmingRemoveTeamId(null);
    },
  });
  const [updateUserRoleMutation] = useMutation(UPDATE_USER_ROLE, {
    onError: (error) => {
      console.error("Error updating user role:", error);
      const errorMsg =
        error instanceof ApolloError
          ? error.graphQLErrors[0]?.message || "Error updating role"
          : "An unexpected error occurred during role update.";
      setRowError(errorMsg);
      toast.error(`Error: ${errorMsg}`);
      setIsChangingRole(false);
    },
  });

  const handleAddToTeam = useCallback(async () => {
    if (!selectedTeamIdForRow) {
      setRowError("Please select a team first.");
      return;
    }
    setRowError(null);
    setIsAdding(true);

    try {
      await addUserToTeamMutation({
        variables: { userId: user.id, teamId: selectedTeamIdForRow },
      });

      console.log(
        `[UserRow Add] Checking if user ${user.id} matches loggedInUser ${loggedInUserId}`
      );
      if (loggedInUserId && user.id === loggedInUserId) {
        const currentVersion = loggedInUserTeamsVersion();
        loggedInUserTeamsVersion(currentVersion + 1);
        console.log(
          `[UserRow Add] Incremented teamsVersion to: ${loggedInUserTeamsVersion()}`
        );
      }
    } catch (error) {
      console.error("Catch block for handleAddToTeam:", error);
      if (!rowError) {
        const errorMsg =
          error instanceof Error ? error.message : "Failed to add to team.";
        setRowError(errorMsg);
        toast.error(`Error: ${errorMsg}`);
      }
    } finally {
      setIsAdding(false);
    }
  }, [
    user.id,
    selectedTeamIdForRow,
    addUserToTeamMutation,
    loggedInUserId,
    rowError,
  ]);

  const requestRemoveConfirmation = (teamId: string) => {
    setConfirmingRemoveTeamId(teamId);
    setRowError(null);
  };

  const cancelRemoveConfirmation = () => {
    setConfirmingRemoveTeamId(null);
  };

  const executeRemoveTeam = useCallback(
    async (teamIdToRemove: string) => {
      if (!teamIdToRemove) return;
      setRowError(null);
      setIsProcessingRemove(teamIdToRemove);
      setConfirmingRemoveTeamId(null);

      try {
        await removeUserFromTeamMutation({
          variables: { userId: user.id, teamId: teamIdToRemove },
        });

        console.log(
          `[UserRow Remove] Checking if user ${user.id} matches loggedInUser ${loggedInUserId}`
        );
        if (loggedInUserId && user.id === loggedInUserId) {
          const currentVersion = loggedInUserTeamsVersion();
          loggedInUserTeamsVersion(currentVersion + 1);
          console.log(
            `[UserRow Remove] Incremented teamsVersion to: ${loggedInUserTeamsVersion()}`
          );
        }
      } catch (error) {
        console.error("Catch block for executeRemoveTeam:", error);
        if (!rowError) {
          const errorMsg =
            error instanceof Error
              ? error.message
              : "Failed to remove from team.";
          setRowError(errorMsg);
          toast.error(`Error: ${errorMsg}`);
        }
      } finally {
        setIsProcessingRemove(null);
      }
    },
    [user.id, removeUserFromTeamMutation, loggedInUserId, rowError]
  );

  const handleRoleChange = useCallback(
    async (newRole: UserRole) => {
      if (newRole === user.role) return;
      setRowError(null);
      setIsChangingRole(true);

      try {
        const result = await updateUserRoleMutation({
          variables: { userId: user.id, newRole },
        });
        const updatedRole = result.data?.updateUserRole?.role;
        if (!updatedRole) {
          throw new Error("Mutation did not return updated role.");
        }

        const userCacheId = client.cache.identify({
          __typename: "User",
          id: user.id,
        });
        if (!userCacheId) {
          throw new Error("Could not identify user in cache");
        }

        client.writeFragment({
          id: userCacheId,
          fragment: gql`
            fragment UpdateUserRoleDataRow on User {
              role
            }
          `,
          data: { role: updatedRole },
        });
        console.log(`Successfully updated role cache for user ${user.id}.`);
        toast.success(`Role for ${user.email} updated to ${newRole}!`);
      } catch (error) {
        console.error("Catch block for handleRoleChange:", error);
        if (!rowError) {
          const errorMsg =
            error instanceof ApolloError
              ? error.graphQLErrors[0]?.message || "Error updating role"
              : error instanceof Error
              ? error.message
              : "Failed to update role.";
          setRowError(errorMsg);
          toast.error(`Error: ${errorMsg}`);
        }
      } finally {
        setIsChangingRole(false);
      }
    },
    [user.id, user.role, updateUserRoleMutation, client, rowError, user.email]
  );

  return (
    <>
      <tr>
        <td className="px-6 py-4 whitespace-nowrap border-b border-gray-200 shadow-md">
          {user.email}
          {rowError && <p className="text-red-500 text-xs mt-1">{rowError}</p>}
        </td>

        <td className="px-6 py-4 whitespace-nowrap border-b border-gray-200 shadow-md align-top">
          <div className="flex flex-col space-y-3">
            <div className="flex items-center space-x-2">
              <div className="relative flex-grow">
                <select
                  value={selectedTeamIdForRow}
                  onChange={(e) => setSelectedTeamIdForRow(e.target.value)}
                  className="w-full px-3 py-1 border border-gray-300 rounded appearance-none text-sm"
                  disabled={isAdding}
                >
                  <option value="">Select team...</option>
                  {allTeams.map((team) => (
                    <option key={team.id} value={team.id}>
                      {team.name}
                    </option>
                  ))}
                </select>
                <div className="absolute inset-y-0 right-0 flex items-center px-2 pointer-events-none">
                  <svg
                    className="w-4 h-4 text-gray-400"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth="2"
                      d="M19 9l-7 7-7-7"
                    ></path>
                  </svg>
                </div>
              </div>
              <button
                onClick={handleAddToTeam}
                disabled={isAdding || !selectedTeamIdForRow}
                className={`bg-black text-white font-bold py-1 px-2 rounded flex items-center text-sm disabled:opacity-50 ${
                  isAdding ? "bg-gray-500" : "hover:bg-green-700"
                }`}
              >
                {isAdding ? (
                  <>
                    <svg
                      className="animate-spin mr-1 h-3 w-3 text-white"
                      fill="none"
                      viewBox="0 0 24 24"
                    >
                      <circle
                        className="opacity-25"
                        cx="12"
                        cy="12"
                        r="10"
                        stroke="currentColor"
                        strokeWidth="4"
                      ></circle>
                      <path
                        className="opacity-75"
                        fill="currentColor"
                        d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                      ></path>
                    </svg>
                    Adding...
                  </>
                ) : (
                  <svg
                    className="w-3 h-3 mr-1"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth="2"
                      d="M12 6v6m0 0v6m0-6h6m-6 0H6"
                    ></path>
                  </svg>
                )}
                Add
              </button>
            </div>

            {user.teams && user.teams.length > 0 ? (
              <div className="flex flex-wrap gap-1 pt-1">
                {user.teams.map((team) => (
                  <div
                    key={team.id}
                    className={`rounded-full px-2 py-0.5 text-xs flex items-center border ${
                      confirmingRemoveTeamId === team.id
                        ? "bg-red-100 border-red-400"
                        : "bg-gray-100 border-gray-300"
                    }`}
                  >
                    <span>{team.name}</span>
                    {confirmingRemoveTeamId === team.id ? (
                      <>
                        <button
                          onClick={() => executeRemoveTeam(team.id)}
                          disabled={isProcessingRemove === team.id}
                          className="ml-1.5 px-1 py-0.5 bg-red-500 text-white rounded text-xxs hover:bg-red-700 disabled:opacity-50"
                          title="Confirm Remove"
                        >
                          {isProcessingRemove === team.id ? "..." : "Confirm"}
                        </button>
                        <button
                          onClick={cancelRemoveConfirmation}
                          disabled={isProcessingRemove === team.id}
                          className="ml-1 px-1 py-0.5 bg-gray-300 text-black rounded text-xxs hover:bg-gray-400 disabled:opacity-50"
                          title="Cancel"
                        >
                          {" "}
                          X{" "}
                        </button>
                      </>
                    ) : (
                      <button
                        onClick={() => requestRemoveConfirmation(team.id)}
                        disabled={
                          !!isProcessingRemove ||
                          confirmingRemoveTeamId === team.id
                        }
                        className="ml-1.5 text-gray-400 hover:text-red-600 disabled:opacity-50"
                        title="Remove from team"
                      >
                        <svg
                          className="w-3 h-3"
                          fill="none"
                          stroke="currentColor"
                          viewBox="0 0 24 24"
                        >
                          <path
                            strokeLinecap="round"
                            strokeLinejoin="round"
                            strokeWidth="2"
                            d="M6 18L18 6M6 6l12 12"
                          ></path>
                        </svg>
                      </button>
                    )}
                  </div>
                ))}
              </div>
            ) : (
              <span className="text-gray-500 text-xs italic pt-1">
                No teams assigned
              </span>
            )}
          </div>
        </td>

        <td className="px-6 py-4 whitespace-nowrap border-b border-gray-200 shadow-md">
          {isChangingRole ? (
            <span className="text-xs text-gray-500 italic">Updating...</span>
          ) : (
            <UserRoleSelect
              currentRole={user.role}
              onRoleChange={handleRoleChange}
            />
          )}
        </td>
      </tr>
    </>
  );
};

export default React.memo(UserRow);

// ====== FILE: src\app\components\Admin\UserTable.tsx ======

"use client";
import React from "react";
import UserRow, { User, Team } from "./UserRow";

interface UserTableProps {
  users: User[];
  allTeams: Team[];
  loggedInUserId: number | undefined;
}

const UserTable: React.FC<UserTableProps> = ({
  users,
  allTeams,
  loggedInUserId,
}) => {
  return (
    <table className="min-w-full table-auto">
      <thead className="bg-black">
        <tr>
          <th className="px-6 py-3 text-left text-lg font-medium text-white uppercase tracking-wider">
            User
          </th>
          <th className="px-6 py-3 text-left text-lg font-medium text-white uppercase tracking-wider">
            Team Management
          </th>
          <th className="px-6 py-3 text-left text-lg font-medium text-white uppercase tracking-wider">
            Role
          </th>
        </tr>
      </thead>
      <tbody>
        {users.map((user) => (
          <UserRow
            key={user.id}
            user={user}
            allTeams={allTeams}
            loggedInUserId={loggedInUserId}
          />
        ))}
      </tbody>
    </table>
  );
};

export default UserTable;

// ====== FILE: src\app\components\ui\background-beams.tsx ======

"use client";
import React from "react";
import { motion } from "framer-motion";
import { cn } from "@/app/lib/utils";

export const BackgroundBeams = React.memo(
  ({ className }: { className?: string }) => {
    const paths = [
      "M-380 -189C-380 -189 -312 216 152 343C616 470 684 875 684 875",
      "M-373 -197C-373 -197 -305 208 159 335C623 462 691 867 691 867",
      "M-366 -205C-366 -205 -298 200 166 327C630 454 698 859 698 859",
      "M-359 -213C-359 -213 -291 192 173 319C637 446 705 851 705 851",
      "M-352 -221C-352 -221 -284 184 180 311C644 438 712 843 712 843",
      "M-345 -229C-345 -229 -277 176 187 303C651 430 719 835 719 835",
      "M-338 -237C-338 -237 -270 168 194 295C658 422 726 827 726 827",
      "M-331 -245C-331 -245 -263 160 201 287C665 414 733 819 733 819",
      "M-324 -253C-324 -253 -256 152 208 279C672 406 740 811 740 811",
      "M-317 -261C-317 -261 -249 144 215 271C679 398 747 803 747 803",
      "M-310 -269C-310 -269 -242 136 222 263C686 390 754 795 754 795",
      "M-303 -277C-303 -277 -235 128 229 255C693 382 761 787 761 787",
      "M-296 -285C-296 -285 -228 120 236 247C700 374 768 779 768 779",
      "M-289 -293C-289 -293 -221 112 243 239C707 366 775 771 775 771",
      "M-282 -301C-282 -301 -214 104 250 231C714 358 782 763 782 763",
      "M-275 -309C-275 -309 -207 96 257 223C721 350 789 755 789 755",
      "M-268 -317C-268 -317 -200 88 264 215C728 342 796 747 796 747",
      "M-261 -325C-261 -325 -193 80 271 207C735 334 803 739 803 739",
      "M-254 -333C-254 -333 -186 72 278 199C742 326 810 731 810 731",
      "M-247 -341C-247 -341 -179 64 285 191C749 318 817 723 817 723",
      "M-240 -349C-240 -349 -172 56 292 183C756 310 824 715 824 715",
      "M-233 -357C-233 -357 -165 48 299 175C763 302 831 707 831 707",
      "M-226 -365C-226 -365 -158 40 306 167C770 294 838 699 838 699",
      "M-219 -373C-219 -373 -151 32 313 159C777 286 845 691 845 691",
      "M-212 -381C-212 -381 -144 24 320 151C784 278 852 683 852 683",
      "M-205 -389C-205 -389 -137 16 327 143C791 270 859 675 859 675",
      "M-198 -397C-198 -397 -130 8 334 135C798 262 866 667 866 667",
      "M-191 -405C-191 -405 -123 0 341 127C805 254 873 659 873 659",
      "M-184 -413C-184 -413 -116 -8 348 119C812 246 880 651 880 651",
      "M-177 -421C-177 -421 -109 -16 355 111C819 238 887 643 887 643",
      "M-170 -429C-170 -429 -102 -24 362 103C826 230 894 635 894 635",
      "M-163 -437C-163 -437 -95 -32 369 95C833 222 901 627 901 627",
      "M-156 -445C-156 -445 -88 -40 376 87C840 214 908 619 908 619",
      "M-149 -453C-149 -453 -81 -48 383 79C847 206 915 611 915 611",
      "M-142 -461C-142 -461 -74 -56 390 71C854 198 922 603 922 603",
      "M-135 -469C-135 -469 -67 -64 397 63C861 190 929 595 929 595",
      "M-128 -477C-128 -477 -60 -72 404 55C868 182 936 587 936 587",
      "M-121 -485C-121 -485 -53 -80 411 47C875 174 943 579 943 579",
      "M-114 -493C-114 -493 -46 -88 418 39C882 166 950 571 950 571",
      "M-107 -501C-107 -501 -39 -96 425 31C889 158 957 563 957 563",
      "M-100 -509C-100 -509 -32 -104 432 23C896 150 964 555 964 555",
      "M-93 -517C-93 -517 -25 -112 439 15C903 142 971 547 971 547",
      "M-86 -525C-86 -525 -18 -120 446 7C910 134 978 539 978 539",
      "M-79 -533C-79 -533 -11 -128 453 -1C917 126 985 531 985 531",
      "M-72 -541C-72 -541 -4 -136 460 -9C924 118 992 523 992 523",
      "M-65 -549C-65 -549 3 -144 467 -17C931 110 999 515 999 515",
      "M-58 -557C-58 -557 10 -152 474 -25C938 102 1006 507 1006 507",
      "M-51 -565C-51 -565 17 -160 481 -33C945 94 1013 499 1013 499",
      "M-44 -573C-44 -573 24 -168 488 -41C952 86 1020 491 1020 491",
      "M-37 -581C-37 -581 31 -176 495 -49C959 78 1027 483 1027 483",
    ];
    return (
      <div
        className={cn(
          "absolute  h-full w-full inset-0  [mask-size:40px] [mask-repeat:no-repeat] flex items-center justify-center bg-slate-100",
          className
        )}
      >
        <svg
          className=" z-0 h-full w-full pointer-events-none absolute "
          width="100%"
          height="100%"
          viewBox="0 0 696 316"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M-380 -189C-380 -189 -312 216 152 343C616 470 684 875 684 875M-373 -197C-373 -197 -305 208 159 335C623 462 691 867 691 867M-366 -205C-366 -205 -298 200 166 327C630 454 698 859 698 859M-359 -213C-359 -213 -291 192 173 319C637 446 705 851 705 851M-352 -221C-352 -221 -284 184 180 311C644 438 712 843 712 843M-345 -229C-345 -229 -277 176 187 303C651 430 719 835 719 835M-338 -237C-338 -237 -270 168 194 295C658 422 726 827 726 827M-331 -245C-331 -245 -263 160 201 287C665 414 733 819 733 819M-324 -253C-324 -253 -256 152 208 279C672 406 740 811 740 811M-317 -261C-317 -261 -249 144 215 271C679 398 747 803 747 803M-310 -269C-310 -269 -242 136 222 263C686 390 754 795 754 795M-303 -277C-303 -277 -235 128 229 255C693 382 761 787 761 787M-296 -285C-296 -285 -228 120 236 247C700 374 768 779 768 779M-289 -293C-289 -293 -221 112 243 239C707 366 775 771 775 771M-282 -301C-282 -301 -214 104 250 231C714 358 782 763 782 763M-275 -309C-275 -309 -207 96 257 223C721 350 789 755 789 755M-268 -317C-268 -317 -200 88 264 215C728 342 796 747 796 747M-261 -325C-261 -325 -193 80 271 207C735 334 803 739 803 739M-254 -333C-254 -333 -186 72 278 199C742 326 810 731 810 731M-247 -341C-247 -341 -179 64 285 191C749 318 817 723 817 723M-240 -349C-240 -349 -172 56 292 183C756 310 824 715 824 715M-233 -357C-233 -357 -165 48 299 175C763 302 831 707 831 707M-226 -365C-226 -365 -158 40 306 167C770 294 838 699 838 699M-219 -373C-219 -373 -151 32 313 159C777 286 845 691 845 691M-212 -381C-212 -381 -144 24 320 151C784 278 852 683 852 683M-205 -389C-205 -389 -137 16 327 143C791 270 859 675 859 675M-198 -397C-198 -397 -130 8 334 135C798 262 866 667 866 667M-191 -405C-191 -405 -123 0 341 127C805 254 873 659 873 659M-184 -413C-184 -413 -116 -8 348 119C812 246 880 651 880 651M-177 -421C-177 -421 -109 -16 355 111C819 238 887 643 887 643M-170 -429C-170 -429 -102 -24 362 103C826 230 894 635 894 635M-163 -437C-163 -437 -95 -32 369 95C833 222 901 627 901 627M-156 -445C-156 -445 -88 -40 376 87C840 214 908 619 908 619M-149 -453C-149 -453 -81 -48 383 79C847 206 915 611 915 611M-142 -461C-142 -461 -74 -56 390 71C854 198 922 603 922 603M-135 -469C-135 -469 -67 -64 397 63C861 190 929 595 929 595M-128 -477C-128 -477 -60 -72 404 55C868 182 936 587 936 587M-121 -485C-121 -485 -53 -80 411 47C875 174 943 579 943 579M-114 -493C-114 -493 -46 -88 418 39C882 166 950 571 950 571M-107 -501C-107 -501 -39 -96 425 31C889 158 957 563 957 563M-100 -509C-100 -509 -32 -104 432 23C896 150 964 555 964 555M-93 -517C-93 -517 -25 -112 439 15C903 142 971 547 971 547M-86 -525C-86 -525 -18 -120 446 7C910 134 978 539 978 539M-79 -533C-79 -533 -11 -128 453 -1C917 126 985 531 985 531M-72 -541C-72 -541 -4 -136 460 -9C924 118 992 523 992 523M-65 -549C-65 -549 3 -144 467 -17C931 110 999 515 999 515M-58 -557C-58 -557 10 -152 474 -25C938 102 1006 507 1006 507M-51 -565C-51 -565 17 -160 481 -33C945 94 1013 499 1013 499M-44 -573C-44 -573 24 -168 488 -41C952 86 1020 491 1020 491M-37 -581C-37 -581 31 -176 495 -49C959 78 1027 483 1027 483M-30 -589C-30 -589 38 -184 502 -57C966 70 1034 475 1034 475M-23 -597C-23 -597 45 -192 509 -65C973 62 1041 467 1041 467M-16 -605C-16 -605 52 -200 516 -73C980 54 1048 459 1048 459M-9 -613C-9 -613 59 -208 523 -81C987 46 1055 451 1055 451M-2 -621C-2 -621 66 -216 530 -89C994 38 1062 443 1062 443M5 -629C5 -629 73 -224 537 -97C1001 30 1069 435 1069 435M12 -637C12 -637 80 -232 544 -105C1008 22 1076 427 1076 427M19 -645C19 -645 87 -240 551 -113C1015 14 1083 419 1083 419"
            stroke="url(#paint0_radial_242_278)"
            strokeOpacity="0.05"
            strokeWidth="0.5"
          ></path>

          {paths.map((path, index) => (
            <motion.path
              key={index}
              d={path}
              stroke={`url(#linearGradient-${index})`}
              strokeOpacity="0.6"
              strokeWidth="1"
            ></motion.path>
          ))}
          <defs>
            {paths.map((path, index) => (
              <motion.linearGradient
                id={`linearGradient-${index}`}
                x1="100%"
                x2="100%"
                y1="100%"
                y2="100%"
                key={`gradient-${index}`}
                animate={{
                  x1: ["0%", "100%"],
                  x2: ["0%", "95%"],
                  y1: ["0%", "100%"],
                  // y2: ["0%", `${93 + Math.random() * 8}%`],
                  y2: [
                    "0%",
                    `${Math.max(1, Math.min(100, 93 + Math.random() * 8))}%`,
                  ],
                }}
                transition={{
                  duration: Math.random() * 10 + 10,
                  ease: "easeInOut",
                  repeat: Infinity,
                  delay: Math.random() * 10,
                }}
              >
                <stop stopColor="#18CCFC" stopOpacity="0"></stop>
                <stop stopColor="#18CCFC"></stop>
                <stop offset="32.5%" stopColor="#6344F5"></stop>
                <stop offset="100%" stopColor="#AE48FF" stopOpacity="0"></stop>
              </motion.linearGradient>
            ))}

            <radialGradient
              id="paint0_radial_242_278"
              cx="0"
              cy="0"
              r="1"
              gradientUnits="userSpaceOnUse"
              gradientTransform="translate(352 34) rotate(90) scale(555 1560.62)"
            >
              <stop offset="0.0666667" stopColor="var(--neutral-300)"></stop>
              <stop offset="0.243243" stopColor="var(--neutral-300)"></stop>
              <stop offset="0.43594" stopColor="white" stopOpacity="0"></stop>
            </radialGradient>
          </defs>
        </svg>
      </div>
    );
  }
);
BackgroundBeams.displayName = "BackgroundBeams";

// ====== FILE: src\app\components\ui\button.tsx ======

"use client";

import * as React from "react";
import { Slot } from "@radix-ui/react-slot";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/app/lib/utils";

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
);

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean;
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button";
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    );
  }
);
Button.displayName = "Button";

export { Button, buttonVariants };
