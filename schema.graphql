# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AuthResponse {
  accessToken: String!
  user: UserProfileDto
}

input CreateTeamInput {
  """
  Unique team identifier (3-50 characters, alphanumeric, hyphens, underscores)
  """
  id: String!

  """Team display name (2-100 characters)"""
  name: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeleteRateInput {
  rateId: Int!
}

type DeleteRateResponse {
  id: Int!
}

input DeleteTimeInput {
  id: Int!
}

input GetTeamInput {
  """Team ID to retrieve"""
  id: String!
}

type Invoice {
  projectId: String!
  projectName: String!
  rates: [RateDetail!]
  teamId: String!
  teamName: String!

  """Total cost in Danish Krona (DKK)"""
  totalCost: Float!
  totalHours: Float!
}

input InvoiceInput {
  """End date for invoice period"""
  endDate: DateTime!

  """Project id for invoice"""
  projectId: String!

  """Start date for invoice period"""
  startDate: DateTime!
}

type Issue {
  assigneeName: String!
  createdAt: String!
  dueDate: String
  id: String!
  identifier: String!
  labels: [Label]
  priorityLabel: String!
  projectId: String!
  projectName: String!
  state: String!
  teamKey: String!
  teamName: String!
  title: String!
  updatedAt: String!
}

type Label {
  color: String!
  id: String!
  name: String!
  parentId: String
}

type LogoutResponse {
  success: Boolean!
}

type Mutation {
  addUserToTeam(input: UserTeamInput!): User!
  createRate(rateInputCreate: RateInputCreate!): Rate!
  createTeam(input: CreateTeamInput!): Team!
  createTime(timeInputCreate: TimeInputCreate!): Time!
  deleteRate(input: DeleteRateInput!): DeleteRateResponse!
  deleteTime(input: DeleteTimeInput!): Time!
  login(input: SignInInput!): AuthResponse!
  logout: LogoutResponse!
  refreshToken: RefreshTokenResponse!
  removeUserFromTeam(input: UserTeamInput!): User!
  signup(input: SignUpInput!): AuthResponse!
  synchronizeDatabase: SyncResponse!
  updateTime(timeInputUpdate: TimeInputUpdate!): Time!
  updateUserRole(input: UpdateUserRoleInput!): User!
}

type PaginatedIssueResponse {
  hasNext: Boolean!
  issues: [Issue!]!
  total: Int!
}

type Project {
  createdAt: String!
  description: String
  estimatedTime: Int
  id: String!
  name: String!
  startDate: String
  state: String!
  targetDate: String
  teamId: String!
  teamName: String
  updatedAt: String!
}

type Query {
  getAllSimpleTeams: [SimpleTeamDTO!]!
  getTeam(input: GetTeamInput!): Team!
  getTotalTimeForUserProject(projectId: String!, userId: Float!): Float!
  getTotalTimeSpent(endDate: String!, projectId: String!, startDate: String!, userId: Float!): Float!
  invoiceForProject(input: InvoiceInput!): Invoice!
  issues(limit: Int! = 50, page: Int! = 1): PaginatedIssueResponse!
  me: UserProfileDto!
  myProjects: [Project!]!
  project(id: String!): Project!
  projectCount: Int!
  projectCountByTeam(teamId: String!): Int!
  projects: [Project!]!
  projectsByTeam(teamId: String!): [Project!]!
  rates(teamId: String!): [Rate!]!
  times(projectId: String!): [Time!]!
  users(args: UserQueryArgs!): [User!]!
  usersCount(role: UserRole, search: String): Int!
}

type Rate {
  id: Int!
  name: String!

  """Hourly rate in Danish Krona (DKK) - e.g., 50.00 for 50.00 DKK/hour"""
  rate: Float!
  teamId: String!
}

type RateDetail {
  """Cost in Danish Krona (DKK) for this rate"""
  cost: Float!
  hours: Float!
  rateId: Int!
  rateName: String!

  """Rate per hour in Danish Krona (DKK)"""
  ratePerHour: Float!
}

input RateInputCreate {
  """Rate name"""
  name: String!

  """Hourly rate in Danish Krona (DKK) - e.g., 50.00 for 50.00 DKK/hour"""
  rate: Float!

  """Rates team id"""
  teamId: String!
}

type RefreshTokenResponse {
  accessToken: String!
}

input SignInInput {
  email: String!
  password: String!
}

input SignUpInput {
  email: String!
  password: String!
}

type SimpleTeamDTO {
  id: String!
  name: String!
}

type SyncResponse {
  message: String!
  status: String!
  timestamp: String!
}

type Team {
  id: String!
  name: String!
  projects: [Project!]
  rates: [Rate!]
}

type Time {
  endTime: DateTime
  id: Int!
  projectId: String!
  rateId: Int
  startTime: DateTime!
  totalElapsedTime: Int!
  userId: Int!
}

input TimeInputCreate {
  """End time"""
  endTime: DateTime

  """Project ID"""
  projectId: String!

  """Rate ID"""
  rateId: Int!

  """Start time"""
  startTime: DateTime!

  """Total Elapsed Time"""
  totalElapsedTime: Int!

  """User ID"""
  userId: Int!
}

input TimeInputUpdate {
  """End time"""
  endTime: DateTime

  """Time entry ID"""
  id: Int!

  """Total Elapsed Time"""
  totalElapsedTime: Int!
}

input UpdateUserRoleInput {
  newRole: UserRole!
  userId: Int!
}

type User {
  email: String!
  id: Int!
  role: UserRole!
  teams: [Team!]!
}

type UserProfileDto {
  email: String!
  id: Int!
  role: UserRole!
}

input UserQueryArgs {
  page: Int = 1
  pageSize: Int = 10
  role: UserRole
  search: String
}

"""Defines the roles a user can have"""
enum UserRole {
  ADMIN
  COLLABORATOR
  ENABLER
  PENDING
}

input UserTeamInput {
  teamId: String!
  userId: Int!
}